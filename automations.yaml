################################################
#
#      Harmony Automations
#
################################################

- alias: Close Bedroom Curtains At Sunset
  trigger:
  - event: sunset
    platform: sun
    offset: '-00:30:00'
  condition:
    condition: state
    entity_id: cover.bedroom_curtains
    state: 'open'
  action:
  - service: cover.close_cover
    entity_id: cover.bedroom_curtains
    
- alias: Close Bay Window Curtains At Sunset
  trigger:
  - event: sunset
    platform: sun
    offset: '-00:30:00'
  condition:
    condition: state
    entity_id: cover.bay_window_curtains
    state: 'open'
  action:
  - service: cover.close_cover
    entity_id: cover.bay_window_curtains

- alias: Outside Speakers CC
  trigger:
  - platform: state
    entity_id: media_player.outdoor_speakers
    to: 'playing'
  - platform: state
    entity_id: media_player.outdoor_speakers
    to: 'idle'
  action:
  - service: script.turn_on
    entity_id: script.zone_2_cc

- alias: Set Den Harmony Off
  trigger:
    platform: state
    entity_id: remote.harmony_hub_den
    from: 'on'
    to: 'off'
  condition:
    condition: template
    value_template: '{{ trigger.to_state.attributes.current_activity == "PowerOff" }}'
  action:
  - service: switch.turn_off
    entity_id: switch.kitchen_tv
  - service: light.turn_off
    entity_id: light.tv_lights
  - condition: state
    entity_id: switch.fireplace
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.fireplace

- alias: Set Bedroom Booleans Off
  trigger:
    platform: state
    entity_id: remote.harmony_hub_bedroom
    from: 'on'
    to: 'off'
  condition:
    condition: template
    value_template: '{{ trigger.to_state.attributes.current_activity == "PowerOff" }}'
  action:
  - service: light.turn_off
    entity_id: light.biased_lights
     
- alias: Fireplace and TV Lights Between Sunset and Sunrise
  trigger:
  - platform: state
    entity_id: remote.harmony_hub_den
    from: 'off'
    to: 'on'
  - platform: sun
    event: sunset
    offset: "00:01:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: template
      value_template: "{{ states.remote.harmony_hub_den.attributes.current_activity != 'PowerOff' }}"
  action:
  - service: light.turn_on
    entity_id: light.tv_lights
    data:
      brightness_pct: 100
      kelvin: 6500
  - condition: state
    entity_id: switch.fireplace
    state: 'off'
  - service: switch.turn_on
    entity_id: switch.fireplace

- alias: Turn on Fireplace and TV Lights Night
  trigger:
  - event: sunset
    platform: sun
    offset: '-00:30:00'
  condition:
    condition: template
    value_template: "{{ states.remote.harmony_hub_den.attributes.current_activity != 'PowerOff' }}"
  action:
  - service: light.turn_on
    entity_id: light.tv_lights
    data:
      brightness_pct: 100
      kelvin: 6500
  - condition: state
    entity_id: switch.fireplace
    state: 'off'
  - service: switch.turn_on
    entity_id: switch.fireplace

- alias: Turn on bias lighting bedroom at night
  trigger:
  - platform: state
    entity_id: remote.harmony_hub_bedroom
    from: 'off'
    to: 'on'
  - platform: sun
    event: sunset
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: template
      value_template: '{{ states.remote.harmony_hub_bedroom.attributes.current_activity != "PowerOff" }}'
  action:
  - service: light.turn_on
    entity_id: light.biased_lights
    data:
      brightness_pct: 100
      kelvin: 6500

- alias: Harmony Den activity start
  trigger:
    platform: state
    entity_id: input_select.harmony_den
    from: 'Select Input'
  action:
  - service: remote.turn_on
    entity_id: remote.harmony_hub_den
    data_template:
      activity: >
        {% if is_state("input_select.harmony_den", "Netflix") %}
          19168891
        {% elif is_state("input_select.harmony_den", "Watch Roku") %}
          27030102
        {% elif is_state("input_select.harmony_den", "Watch PC") %}
          25516536
        {% elif is_state("input_select.harmony_den", "Watch Smart TV") %}
          19688407
        {% elif is_state("input_select.harmony_den", "Xbox") %}
          22642672
        {% else %}
        {% endif %}
  - service: input_select.select_option
    entity_id: input_select.harmony_den
    data_template:
      option: "Select Input"
      
- alias: Harmony Bed activity start
  trigger:
    platform: state
    entity_id: input_select.harmony_bed
    from: 'Select Input'
  action:
  - service: remote.turn_on
    entity_id: remote.harmony_hub_bedroom
    data_template:
      activity: >
        {% if is_state("input_select.harmony_den", "Bedroom Bluray") %}
          23738920
        {% elif is_state("input_select.harmony_den", "Bedroom Chromecast") %}
          23739184
        {% elif is_state("input_select.harmony_den", "Watch Fire TV") %}
          19492437
        {% else %}
        {% endif %}
  - service: input_select.select_option
    entity_id: input_select.harmony_bed
    data_template:
      option: "Select Input"
      
- alias: Harmony Den power off
  trigger:
    platform: state
    entity_id: input_select.harmony_den
    to: 'Power Off'
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_hub_den
  - service: input_select.select_option
    entity_id: input_select.harmony_den
    data_template:
      option: "Select Input"
      
- alias: Harmony Bed power off
  trigger:
    platform: state
    entity_id: input_select.harmony_bed
    to: 'Power Off'
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_hub_bedroom
  - service: input_select.select_option
    entity_id: input_select.harmony_bed
    data_template:
      option: "Select Input"
      
- alias: Turn off bias lights and fireplace at sunrise
  trigger:
    platform: sun
    event: sunrise
  action:
  - service: light.turn_off
    entity_id: light.tv_lights
  - service: light.turn_off
    entity_id: light.biased_lights
  - condition: state
    entity_id: input_boolean.fireplace
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.fireplace
    
- alias: Turn off bedroom tv in night mode if movie is done and you fell asleep
  trigger:
  - platform: state
    entity_id: media_player.kodi_bedroom, media_player.bedroom_shield_tv
    to: idle
    for:
      minutes: 30
  condition:
    condition: state
    entity_id: input_boolean.night_mode
    state: 'on'
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_hub_bedroom
    
- alias: Turn off bedroom tv in night mode when channels have been playing for 3 hours
  trigger:
  - platform: state
    entity_id: media_player.kodi_bedroom, media_player.bedroom_shield_tv
    to: playing
    for:
      hours: 3
  - platform: state
    entity_id: sensor.bedroom_shield_app
    to: Vaders
    for:
      hours: 3
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: "{{ is_state('media_player.kodi_bedroom', 'playing') or is_state('sensor.bedroom_shield_app', 'Vaders') or is_state('media_player.bedroom_shield_tv', 'playing') }}"
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
  action:
  - service: remote.turn_off
    entity_id: remote.harmony_hub_bedroom
    
    
################################################
#
#      Laundry notifications
#   
################################################

- alias: Dryer Notification
  trigger:
    platform: state
    entity_id: sensor.dryer_running
    to: 'False'
    for:
      minutes: 3
  condition:
    condition: state
    entity_id: input_boolean.dryer_status
    state: 'on'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.dryer_status
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: "The dryer is done.{% if is_state('input_boolean.washer_status', 'on') %} However the washer is still running {% else %} Time to get your clothes {% endif %}"
      title: Shokabow Zoo
  # - service: notify.chrome
    # data:
      # message: "The dryer is done.{% if is_state('input_boolean.washer_status', 'on') %} However the washer is still running {% else %} Time to get your clothes{% endif %}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "The dryer is done.{% if is_state('input_boolean.washer_status', 'on') %} However the washer is still running {% else %} Time to get your clothes{% endif %}"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The dryer is done.{% if is_state('input_boolean.washer_status', 'on') %} However the washer is still running {% else %} Time to get your clothes{% endif %}"
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: shell_command.dryer_done
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    #data_template:
      #message: "The dryer is done.{% if is_state('input_boolean.washer_status', 'on') %} However the washer is still running {% else %} Time to get your clothes{% endif %}"
      #entity_id: >
       # {% if states.media_player.home_notification.state != 'unavailable' %}
       #   media_player.home_notification
       # {% else %}
       #   media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
       # {%endif %}

- alias: Washer Notification
  trigger:
    platform: state
    entity_id: sensor.washer_running
    to: 'False'
    for:
      minutes: 3
  condition:
    condition: state
    entity_id: input_boolean.washer_status
    state: 'on'
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.washer_status
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: "The washer is done.{% if is_state('input_boolean.dryer_status', 'on') %} However the dryer is still running {% else %} Time to switch laundry{% endif %}"
      title: Shokabow Zoo
  # - service: notify.chrome
    # data:
      # message: "The washer is done.{% if is_state('input_boolean.dryer_status', 'on') %} However the dryer is still running {% else %} Time to switch laundry {% endif %}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "The washer is done.{% if is_state('input_boolean.dryer_status', 'on') %} However the dryer is still running {% else %} Time to switch laundry{% endif %}"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The washer is done.{% if is_state('input_boolean.dryer_status', 'on') %} However the dryer is still running {% else %} Time to switch laundry{% endif %}"
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: shell_command.washer_done
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: "The washer is done.{% if is_state('input_boolean.dryer_status', 'on') %} However the dryer is still running {% else %} Time to switch laundry {% endif %}"
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
        
- alias: Dishwasher Notification
  trigger:
    platform: state
    entity_id: sensor.dishwasher_running
    to: 'False'
    for:
      minutes: 5
  condition:
    condition: state
    entity_id: input_boolean.dishwasher_status
    state: 'on'
  action:
  - service: notify.den
    data:
      data:
        color: red
        duration: 10
        position: center
      message: The dishes are done!
      title: Shokabow Zoo
  - service: input_boolean.turn_off
    entity_id: input_boolean.dishwasher_status
  # - service: notify.chrome
    # data:
      # message: "The dishes are done"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "The dishes are done."
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The dishes are done."
  - service: input_boolean.turn_on
    entity_id: input_boolean.dishes_clean
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: shell_command.dishes_done
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: 'Dishes are done!'
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
        
- alias: Washer Start
  trigger:
    platform: state
    entity_id: sensor.washer_running
    to: 'True'
    for:
      minutes: 3
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.washer_status

- alias: Dryer Start
  trigger:
    platform: state
    entity_id: sensor.dryer_running
    to: 'True'
    for:
      minutes: 3
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.dryer_status

- alias: Dishwasher Start
  trigger:
    platform: state
    entity_id: sensor.dishwasher_running
    to: 'True'
  action:
  - service: input_boolean.turn_on
    entity_id: input_boolean.dishwasher_status
  - service: input_boolean.turn_off
    entity_id: input_boolean.dishes_clean  

################################################
#
#      TTS notifications
#
################################################

- alias: Front Door TTS
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'off'
  condition:
    condition: template
    value_template: "{{ trigger.from_state.state != 'unavailable' }}"
  action:
  - service: tts.google_say
    entity_id: media_player.living_room_home
    data_template:
      message: >
        {% if is_state("binary_sensor.front_door", "on") %}
          The front door is open
        {% elif is_state("binary_sensor.front_door", "off") %}
          The front door is closed
        {% else %}
        {% endif %}

- alias: Announce Lock Jammed
  trigger:
    platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '9'
  action:
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: 'The front door lock is jammed'
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
  # - service: notify.chrome
    # data:
      # message: "The front door lock is jammed"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "The front door lock is jammed."
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The front door lock is jammed."
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: shell_command.front_door_jammed

- alias: Notify Catio Door Left Open
  trigger:
    platform: state
    entity_id: binary_sensor.catio_firepit_door, binary_sensor.catio_pool_door
    to: 'on'
    for:
      seconds: 30
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: input_boolean.gardener
      state: 'off'
  action:
  - service: notify.discord
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} has been left open for 30 seconds"
      target:
      - !secret discord_house
  - service: tts.google_say
    entity_id: media_player.den_home_hub
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} has been left open, please close it"

################################################
#
#      Alarm automations and notifications
#
################################################

- alias: Front Door And Living Room Alarm Pic
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
    for:
      minutes: 1
  action:
  - service: camera.snapshot
    data:
      entity_id: camera.living_room_camera
      filename: '/home/homeassistant/.homeassistant/snapshot/living_room_camera.jpg'
  # - service: notify.chrome
    # data:
      # message: "Alarm Tripped!! Check Slack for living room snapshot"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "Living room camera triggered snapshot"
      data:
        file:
          path: "/home/homeassistant/.homeassistant/snapshot/living_room_camera.jpg"
  - service: notify.discord
    data_template:
      message: "Living room camera triggered snapshot"
      target:
      - !secret discord_alarm
      data:
        images:
        - "/home/homeassistant/.homeassistant/snapshot/living_room_camera.jpg"
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Living room camera triggered snapshot"
      data:
        image_file: "/home/homeassistant/.homeassistant/snapshot/living_room_camera.jpg"
  - service: switch.turn_on
    entity_id: switch.living_room_state
  - delay: "00:00:30"
  - service: switch.turn_off
    entity_id: switch.living_room_state

- alias: Den Alarm Pic
  trigger:
  - platform: state
    entity_id: binary_sensor.den_sliding_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
    for:
      minutes: 1
  action:
  - service: camera.snapshot
    data:
      entity_id: camera.den_camera
      filename: '/home/homeassistant/.homeassistant/snapshot/den_camera.jpg'
  # - service: notify.chrome
    # data:
      # message: "Alarm Tripped!! Check Slack for den snapshot"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "Den camera triggered snapshot"
      data:
        file:
          path: "/home/homeassistant/.homeassistant/snapshot/den_camera.jpg"
  - service: notify.discord
    data_template:
      message: "Den camera triggered snapshot."
      target:
      - !secret discord_alarm
      data:
        images:
        - "/home/homeassistant/.homeassistant/snapshot/den_camera.jpg"
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Den camera triggered snapshot"
      data:
        image_file: "/home/homeassistant/.homeassistant/snapshot/den_camera.jpg"
  - service: switch.turn_on
    entity_id: switch.den_state
  - delay: "00:00:30"
  - service: switch.turn_off
    entity_id: switch.den_state

- alias: Kitchen Alarm Pic
  trigger:
    platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
    for:
      minutes: 1
  action:
  - service: camera.snapshot
    data:
      entity_id: camera.baby_monitor
      filename: '/home/homeassistant/.homeassistant/snapshot/baby_monitor.jpg'
  # - service: notify.chrome
    # data:
      # message: "Alarm Tripped!! Check Slack for kitchen snapshot"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "Kitchen camera triggered snapshot"
      data:
        file:
          path: "/home/homeassistant/.homeassistant/snapshot/baby_monitor.jpg"
  - service: notify.discord
    data_template:
      message: "Kitchen camera triggered snapshot"
      target:
      - !secret discord_alarm
      data:
        images:
        - "/home/homeassistant/.homeassistant/snapshot/baby_monitor.jpg"
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Kitchen camera triggered snapshot"
      data:
        image_file: "/home/homeassistant/.homeassistant/snapshot/baby_monitor.jpg"
  - service: switch.turn_on
    entity_id: switch.baby_monitor_state
  - delay: "00:00:30"
  - service: switch.turn_off
    entity_id: switch.baby_monitor_state

- alias: Alarm Tripped
  trigger:
  - platform: state
    entity_id: binary_sensor.den_sliding_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.catio_firepit_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.catio_pool_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.office_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.garage_frontyard
    to: 'on'
  - platform: state
    entity_id: sensor.bay_window_shock_alarm_level
    to: '255'
  - platform: state
    entity_id: sensor.bay_window_shock_burglar
    to: '2'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
    for:
      minutes: 1
  action:
  - delay: "00:00:02"
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  - service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.home
  - service: notify.slack
    data_template:
      message: "The alarm has been tripped from the following windows/doors (may be false alarm, wait for triggered notification in 1 minute): {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - service: notify.discord
    data_template:
      message: "The alarm has been tripped from the following windows/doors (may be false alarm, wait for triggered notification in 1 minute): {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The alarm has been tripped from the following windows/doors (may be false alarm, wait for triggered notification in 1 minute): {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"

- alias: Goodbye on Alarm
  trigger:
    platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  action:
  - service: scene.turn_on
    entity_id: scene.goodbye
  - service: lock.lock
    entity_id: lock.front_door_lock_locked
  # - service: notify.chrome
    # data:
      # message: "The alarm has been activated"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "The alarm has been activated."
  - service: notify.discord
    data_template:
      message: "The alarm has been activated."
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The alarm has been activated."

- alias: Notify Alarm Off
  trigger:
    platform: state
    entity_id: alarm_control_panel.home
    from: armed_away
    to: disarmed
  action:
  # - service: notify.chrome
    # data:
      # message: "The alarm has been deactivated"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "The alarm has been deactivated."
  - service: notify.discord
    data_template:
      message: "The alarm has been deactivated."
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The alarm has been deactivated."

- alias: Arm Alarm When Nobody Home
  trigger:
  - entity_id: group.tracked_users
    platform: state
    to: not_home
    for:
      minutes: 3
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.guest_mode
      state: 'off'
  action:
  - service: alarm_control_panel.alarm_arm_away
    data:
      entity_id: alarm_control_panel.home
  # - service: notify.chrome
    # data:
      # message: "The alarm has been activated since nobody is home"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "The alarm has been activated since nobody is home"
  - service: notify.discord
    data_template:
      message: "The alarm has been activated since nobody is home"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The alarm has been activated since nobody is home"

- alias: Disarm alarm when someone comes home
  trigger:
  - platform: state
    entity_id: group.tracked_users
    to: 'home'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  action:
  - service: alarm_control_panel.alarm_disarm
    data:
      entity_id: alarm_control_panel.home
  # - service: notify.chrome
    # data:
      # message: "The alarm has been deactivated since a tracked user is home"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "The alarm has been deactivated since a tracked user is home"
  - service: notify.discord
    data_template:
      message: "The alarm has been deactivated since a tracked user is home"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The alarm has been deactivated since a tracked user is home"

- alias: Arm Alarm Front Door
  trigger:
  - platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '18'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'disarmed'
  action:
  - service: alarm_control_panel.alarm_arm_away
    data:
      entity_id: alarm_control_panel.home

- alias: Disarm Alarm Front Door
  trigger:
  - platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '19'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_away'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'pending'
  action:
  - service: alarm_control_panel.alarm_disarm
    data:
      entity_id: alarm_control_panel.home

- alias: Turn on lights if alarm is disarmed and code 1 unlocks
  trigger:
  - platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '19'
    for:
      seconds: 1
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: sensor.front_door_lock_alarm_level
      state: '1'
  action:
  - service: light.turn_on
    entity_id: light.living_room_lights_level
  - service: light.turn_on
    entity_id: light.kitchen_lights_level
  - condition: template
    value_template: "{{ states.media_player.kodi_den.state != 'playing' and states.media_player.kodi_shield.state != 'playing' }}"
  - service: light.turn_on
    entity_id: light.den_lights_level

- alias: Dad Unlock
  trigger:
  - platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '19'
    for:
      seconds: 1
  condition:
    condition: state
    entity_id: sensor.front_door_code
    state: 'Dad'
  action:
  - service: light.turn_on
    entity_id: light.office_lights
  # - service: notify.chrome
    # data:
      # message: "The alarm has been deactivated by dad"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "The front door has been unlocked by dad"
  - service: notify.discord
    data_template:
      message: "The front door has been unlocked by dad"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The front door has been unlocked by dad"
  - service: tts.google_say
    entity_id: media_player.kitchen_home, media_player.den_home, media_player.office_speaker
    data:
      message: 'Hello just a friendly reminder to make sure the water bowls in the den, living room and also the ferret cage are refilled.  Dont forget to feed the ferrets and cats.  Please clean up the ferrets and cat litter. Thank you so much have a great day.'

- alias: Zoo keeper Unlock
  trigger:
  - platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '19'
    for:
      seconds: 2
  condition:
    condition: state
    entity_id: sensor.front_door_code
    state: 'Zoo Keeper'
  action:
  - service: light.turn_on
    entity_id: light.office_lights
  # - service: notify.chrome
    # data:
      # message: "The alarm has been deactivated by zoo keeper"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "The front door has been unlocked by zoo keeper"
  - service: notify.discord
    data_template:
      message: "The front door has been unlocked by zoo keeper"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The front door has been unlocked by zoo keeper"

- alias: Warn Alarm On But Window Open
  trigger:
    platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  condition:
    condition: state
    entity_id: binary_sensor.windows
    state: 'on'
  action:
  # - service: notify.chrome
    # data:
      # message: "The following window(s) is/are open but the alarm is turned on{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.den_sliding_door', 'on') %} Den Sliding Door{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}{% if is_state('binary_sensor.front_door', 'on') %} Front Door{% endif %}{% if is_state('binary_sensor.garage_door_frontyard', 'on') %} Garage Door Frontyard{% endif %}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data_template:
      message: "The following window(s) is/are open but the alarm is turned on: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      #{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.den_sliding_door', 'on') %} Den Sliding Door{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}{% if is_state('binary_sensor.front_door', 'on') %} Front Door{% endif %}{% if is_state('binary_sensor.garage_door_frontyard', 'on') %} Garage Door Frontyard{% endif %}"
      #{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.den_sliding_door', 'on') %} Den Sliding Door{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}{% if is_state('binary_sensor.front_door', 'on') %} Front Door{% endif %}{% if is_state('binary_sensor.garage_door_frontyard', 'on') %} Garage Door Frontyard{% endif %}"
  - service: notify.discord
    data_template:
      message: "The following window(s) is/are open but the alarm is turned on: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The following window(s) is/are open but the alarm is turned on: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"

- alias: Notify door lock keypad locked
  trigger:
    platform: state
    entity_id: sensor.front_door_lock_alarm_type
    to: '161'
  action:
  # - service: notify.chrome
    # data:
      # message: "Too many incorrect codes used on front door.  Keypad locked."
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data:
      message: "Too many incorrect codes used on front door. Keypad locked."
  - service: notify.discord
    data_template:
      message: "Too many incorrect codes used on front door. Keypad locked."
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Too many incorrect codes used on front door.  Keypad locked."

- alias: Notify alarm triggered
  trigger:
    platform: state
    entity_id: alarm_control_panel.home
    to: 'triggered'
  action:
  - service: light.turn_on
    entity_id: light.den_lights_level, light.kitchen_lights_level, light.living_room_lights_level, light.bedroom_lights_level, light.office_lights
  - service: notify.slack
    data_template:
      message: "The alarm has been triggered since it was not disarmed for 60 seconds, check Slack for snapshots!! Following windows/doors triggered the alarm: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      #{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.den_sliding_door', 'on') %} Den Sliding Door{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}{% if is_state('binary_sensor.front_door', 'on') %} Front Door{% endif %}{% if is_state('binary_sensor.garage_door_frontyard', 'on') %} Garage Door Frontyard{% endif %}"
  - service: notify.discord
    data_template:
      message: "The alarm has been triggered since it was not disarmed for 60 seconds, check Slack for snapshots!! Following windows/doors triggered the alarm: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The alarm has been triggered since it was not disarmed for 60 seconds, check Slack for snapshots!! Following windows/doors triggered the alarm: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      #{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.den_sliding_door', 'on') %} Den Sliding Door{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}{% if is_state('binary_sensor.front_door', 'on') %} Front Door{% endif %}{% if is_state('binary_sensor.garage_door_frontyard', 'on') %} Garage Door Frontyard{% endif %}"
  - service: switch.turn_on
    entity_id: switch.siren_switch
  - service: script.turn_on
    entity_id: script.den_camera_snapshot
  - service: script.turn_on
    entity_id: script.living_room_camera_snapshot
  # - service: script.turn_on
    # entity_id: script.kitchen_camera_snapshot
  - service: script.turn_on
    entity_id: script.outdoor_camera_snapshot
  - service: script.turn_on
    entity_id: script.den_alarm, script.lr_alarm, script.kitchen_alarm
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  - service: light.turn_on
    entity_id: light.patio

- alias: Turn off armed night when we wake up
  trigger:
  - platform: state
    entity_id: switch.tasker_sleep_tosh
    from: 'on'
    to: 'off'
  - platform: state
    entity_id: switch.tasker_sleep_danny
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_night'
  action:
  - service: alarm_control_panel.alarm_disarm
    entity_id: alarm_control_panel.home
  - service: input_boolean.turn_off
    entity_id: input_boolean.night_mode

- alias: Turn on alarm night in night mode
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  action:
  - service: alarm_control_panel.alarm_arm_night
    entity_id: alarm_control_panel.home
    
- alias: Alarm Tripped in armed night
  trigger:
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.office_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.garage_frontyard
    to: 'on'
  - platform: state
    entity_id: sensor.bay_window_shock_alarm_level
    to: '255'
  - platform: state
    entity_id: sensor.bay_window_shock_burglar
    to: '2'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_night'
    - condition: state
      entity_id: input_boolean.guest_mode
      state: 'off'
  action:
  # - service: notify.chrome
    # data:
      # message: "Alarm is in armed night and the following windows are open{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.den_sliding_door', 'on') %} Den Sliding Door{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}{% if is_state('binary_sensor.front_door', 'on') %} Front Door{% endif %}{% if is_state('binary_sensor.garage_door_frontyard', 'on') %} Garage Door Frontyard{% endif %}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data_template:
      message: "Alarm is in armed night and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - service: notify.discord
    data_template:
      message: "Alarm is in armed night and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Alarm is in armed night and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.monitored_contacts', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      #{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.den_sliding_door', 'on') %} Den Sliding Door{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}{% if is_state('binary_sensor.front_door', 'on') %} Front Door{% endif %}{% if is_state('binary_sensor.garage_door_frontyard', 'on') %} Garage Door Frontyard{% endif %}"
  - service: tts.google_say
    entity_id: media_player.bedroom_home
    data_template:
      message: "Alarm is in armed night and the following windows are open{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}{% if is_state('binary_sensor.garage_door_frontyard', 'on') %} Garage Door Frontyard{% endif %}"

- alias: Windows open while going to bed
  trigger:
  - platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.windows
      state: 'on'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
  action:
  # - service: notify.chrome
    # data_template:
      # message: "The alarm is arming in night mode and the following windows are open{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.slack
    data_template:
      message: "The alarm is arming in night mode and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - service: notify.discord
    data_template:
      message: "The alarm is arming in night mode and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The alarm is arming in night mode and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      #{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}"
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: tts.google_say
    #entity_id: media_player.home_notification
    entity_id: media_player.bedroom_home
    data_template:
      message: "The alarm is arming in night mode and the following windows are open{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}"

- alias: Set alarm status drop down
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'disarmed'
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_night'
  action:
  - service: input_select.select_option
    entity_id: input_select.alarm_status
    data_template:
      option: >
        {% if is_state("alarm_control_panel.home", "disarmed") %}
          Disarmed
        {% elif is_state("alarm_control_panel.home", "armed_away") %}
          Armed Away
        {% elif is_state("alarm_control_panel.home", "armed_night") %}
          Armed Night
        {% else %}
        {% endif %}

- alias: Notify alarm recording started
  trigger:
    platform: state
    entity_id: switch.den_state, switch.baby_monitor_state, switch.living_room_state, switch.frontyard_driveway_state, switch.frontyard_side_gate_state, switch.garage_side_gate_state, switch.garage_state, switch.kitchen_side_gate_state, switch.kitchen_state, switch.patio_state
    to: 'on'
  action:
  - service: notify.slack
    data_template:
      message: "Alarm recording started in {{ trigger.to_state.attributes.friendly_name | replace(' State', '') }}"
  - service: notify.discord
    data_template:
      message: "Alarm recording started in {{ trigger.to_state.attributes.friendly_name | replace(' State', '') }}"
      target:
      - !secret discord_alarm
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Alarm recording started in {{ trigger.to_state.attributes.friendly_name | replace(' State', '') }}"

################################################
#
#      Office automation
#
################################################

- alias: Office Lights On
  trigger:
    platform: state
    entity_id: light.office_lights
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.sleeping
      state: 'off'
  action:
  - service: light.turn_on
    entity_id: light.o1
    data:
      brightness_pct: 100
  - service: light.turn_on
    entity_id: light.o2
    data:
      brightness_pct: 100
  - service: light.turn_on
    entity_id: light.o3
    data:
      brightness_pct: 100
  - service: light.turn_on
    entity_id: light.o4
    data:
      brightness_pct: 100
  - service: light.turn_on
    entity_id: light.office_lights
    data:
      brightness_pct: 100

- alias: Office Lights Off
  trigger:
    platform: state
    entity_id: light.office_lights
    to: 'off'
  action:
  - service: light.turn_off
    entity_id: light.o1
  - service: light.turn_off
    entity_id: light.o2
  - service: light.turn_off
    entity_id: light.o3
  - service: light.turn_off
    entity_id: light.o4

################################################
#
#      Dog Lights
#
################################################

- alias: Dog Lights On
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  - platform: sun
    event: sunset
    offset: "00:01:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_away'
  action:
  - service: light.turn_on
    entity_id: light.front_door_lamp
  - service: light.turn_on
    entity_id: light.corner_lamp
    data:
      kelvin: 2703
      brightness_pct: 100

- alias: Dog Lights Off
  trigger:
  - platform: sun
    event: sunrise
  - platform: state
    entity_id: alarm_control_panel.home
    from: 'armed_away'
    to: 'disarmed'
  action:
  - service: light.turn_off
    entity_id: light.corner_lamp, light.front_door_lamp

################################################
#
#      Morning Automations
#
################################################

- alias: Boogie Morning Rule
  trigger:
  - platform: time
    at: "07:15:00"
  condition:
    condition: and
    conditions:
    - condition: time
      weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'disarmed'
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'armed_night'
  action:
  - service: light.turn_on
    entity_id: light.bedroom_lights_level
  - service: cover.open_cover
    entity_id: cover.bedroom_curtains
  - wait_template: "{{ states.binary_sensor.natachas_bayesian_presence.state == 'off' }}"
  - service: light.turn_off
    entity_id: light.bedroom_lights_level
  - service: switch.turn_off
    entity_id: switch.bedroom_fan
  - condition: state
    entity_id: binary_sensor.bedroom_door
    state: 'on'
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: 'Bedroom door left open and boogie has left for work, go close it!'
      title: Shokabow Zoo
  # - service: notify.chrome
    # data_template:
      # message: "Bedroom door left open and boogie has left for work, go close it!"
      # target: danny_pixel
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "Bedroom door left open and boogie has left for work, go close it!"
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "Bedroom door left open and boogie has left for work, go close it!"
  - service: tts.google_say
    entity_id: media_player.den_home
    data:
      message: "Bedroom door left open and boogie has left for work, go close it!"

- alias: Boogie Take Your Meds
  trigger:
  - platform: time
    at: "08:00:00"
  condition:
    condition: and
    conditions:
    - condition: time
      weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'disarmed'
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'armed_night'
  action:
  - service: tts.google_say
    entity_id: media_player.kitchen_home
    data:
      message: "Don't forget to take your meds"

- alias: Good Morning
  trigger:
  - platform: sun
    event: sunrise
    offset: "00:30:00"
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_night'
  action:
  - service: switch.turn_off
    entity_id: switch.house_fan
  - service: light.turn_off
    entity_id: light.bathroom_night_light, light.kitchen_lights_level, light.bedroom_lights_level, light.toshs
  - wait_template: "{{ is_state('input_boolean.sleeping', 'off') }}"
  - service: cover.open_cover
    entity_id: cover.bay_window_curtains

- alias: Hallway light above horizon
  trigger:
  - platform: state
    entity_id: light.hallway_light
    to: 'on'
  condition:
    condition: state
    entity_id: sun.sun
    state: 'above_horizon'
  action:
  - service: light.turn_on
    entity_id: light.hallway_light
    data:
      kelvin: 6500
      brightness_pct: 100

- alias: Bedroom curtains on weekends
  trigger:
  - platform: time
    at: "10:30:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: cover.bedroom_curtains
      state: 'closed'
    - condition: time
      weekday:
      - sat
      - sun
    - condition: or
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'disarmed'
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'armed_night'
  action:
  - service: cover.open_cover
    entity_id: cover.bedroom_curtains

- alias: Heat up house in morning on work days
  trigger:
  - platform: time
    at: "07:15:00"
  condition:
    condition: and
    conditions:
    - condition: time
      weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
    - condition: numeric_state
      entity_id: sensor.thermostat_temperature
      below: 66
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'disarmed'
      - condition: state
        entity_id: alarm_control_panel.home
        state: 'armed_night'
  action:
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat_heating_1
      #operation_mode: Heat
      temperature: 70
  - service: climate.set_operation_mode
    data:
      entity_id: climate.thermostat_heating_1
      operation_mode: 'heat'
  - wait_template: "{{ state_attr('climate.thermostat_heating_1', 'temperature') == states('sensor.thermostat_temperature') | int }}"
  - delay: "00:01:00"
  - service: climate.set_operation_mode
    data:
      entity_id: climate.thermostat_heating_1
      operation_mode: 'off'

- alias: Den lights on between 4 and 8am
  trigger:
    platform: state
    entity_id: light.den_lights_level
    to: 'on'
  condition:
    condition: time
    after: "04:00:00"
    before: "08:00:00"
  action:
    service: light.turn_on
    entity_id: light.den_lights_level
    data:
      brightness_pct: 5
      
- alias: Raise den lights at 9am if below 30
  trigger:
    platform: time
    at: "09:00:00"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: light.den_lights_level
      state: 'on'
    - condition: template
      value_template: "{{ states.light.den_lights_level.attributes.brightness < 75 }}"
  action:
    service: light.turn_on
    entity_id: light.den_lights_level
    data:
      brightness_pct: 30

- alias: Danny awake
  trigger:
    platform: state
    entity_id: switch.tasker_sleep_danny
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.guest_mode
    state: 'off'
  action:
  - service: light.turn_on
    entity_id: light.den_lights_level

- alias: Open bedroom curtains and turn off the fan when we wake up
  trigger:
  - platform: state
    entity_id: switch.tasker_sleep_danny, switch.tasker_sleep_tosh
    to: 'off'
  - platform: state
    entity_id: sun.sun
    to: 'above_horizon'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: switch.tasker_sleep_danny
      state: 'off'
    - condition: state
      entity_id: switch.tasker_sleep_tosh
      state: 'off'
    - condition: state
      entity_id: sun.sun
      state: 'above_horizon'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
  action:
  - service: switch.turn_off
    entity_id: switch.bedroom_fan
  - condition: state
    entity_id: cover.bedroom_curtains
    state: 'closed'
  - service: cover.open_cover
    entity_id: cover.bedroom_curtains

################################################
#
#      Lock Automations
#
################################################

- alias: Timer Start Auto Lock
  trigger:
  - platform: state
    entity_id: lock.front_door_lock_locked
    to: 'unlocked'
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'off'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.front_door
      state: 'off'
    - condition: state
      entity_id: lock.front_door_lock_locked
      state: 'unlocked'
  action:
  - service: timer.start
    entity_id: timer.door_lock

- alias: Cancel Timer Door Locked
  trigger:
  - platform: state
    entity_id: lock.front_door_lock_locked
    to: 'locked'
  - platform: state
    entity_id: binary_sensor.front_door
    to: 'on'
  action:
  - service: timer.cancel
    entity_id: timer.door_lock

- alias: Auto Lock Front Door
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.door_lock
  condition:
    condition: state
    entity_id: binary_sensor.front_door
    state: 'off'
  action:
  - service: lock.lock
    entity_id: lock.front_door_lock_locked

################################################
#
#      Mailbox notification
#
################################################

- alias: Enable mailbox boolean
  trigger:
  - platform: sun
    event: sunrise
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.mailbox

- alias: Turn off mailbox boolean after it was opened
  trigger:
  - platform: state
    entity_id: binary_sensor.mailbox
    to: 'on'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.mailbox

- alias: Notify Mail Once
  trigger:
  - platform: state
    entity_id: input_boolean.mailbox
    to: 'off'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'disarmed'
  action:
  # - service: notify.chrome
    # data:
      # message: "You got mail"
      # target: danny_pixel
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "You got mail"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "You got mail"
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: shell_command.mail
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: 'You got mail'
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
  - service: notify.den
    data:
      data:
        color: teal
      message: You got mail!
      title: Shokabow Zoo

# - alias: Mailbox boolean hass restart
  # trigger:
    # platform: homeassistant
    # event: start
  # condition:
    # condition: time
    # before: '11:00:00'
  # action:
  # - service: input_boolean.turn_on
    # entity_id: input_boolean.mailbox

################################################
#
#      Basic Light Automations
#
################################################

- alias: Bedroom closet light
  trigger:
  - platform: state
    entity_id: binary_sensor.bedroom_closet_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_closet_door
    to: 'off'
  action:
    service_template: >
           {% if is_state("binary_sensor.bedroom_closet_door", "on") %}
             light.turn_on
           {% elif is_state("binary_sensor.bedroom_closet_door", "off") %}
             light.turn_off
           {% else %}
           {% endif %}
    entity_id: light.bedroom_closet

- alias: Turn off bedroom closet if on for 15 min and door closed
  trigger:
  - platform: state
    entity_id: light.bedroom_closet
    to: 'on'
    for:
      minutes: 15
  condition:
    condition: state
    entity_id: binary_sensor.bedroom_closet_door
    state: 'off'
  action:
    service: light.turn_off
    entity_id: light.bedroom_closet

- alias: Turn off office closet if on for 15 min and door closed
  trigger:
  - platform: state
    entity_id: light.office_closet
    to: 'on'
    for:
      minutes: 15
  condition:
    condition: state
    entity_id: binary_sensor.office_closet_door
    state: 'off'
  action:
    service: light.turn_off
    entity_id: light.office_closet
    
- alias: Office Closet Light
  trigger:
  - platform: state
    entity_id: binary_sensor.office_closet_door
    to: 'on'
  - platform: state
    entity_id: binary_sensor.office_closet_door
    to: 'off'
  action:
    service_template: >
           {% if is_state("binary_sensor.office_closet_door", "on") %}
             light.turn_on
           {% elif is_state("binary_sensor.office_closet_door", "off") %}
             light.turn_off
           {% else %}
           {% endif %}
    entity_id: light.office_closet

- alias: Garage lights from frontyard
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_frontyard
    to: 'on'
  - platform: state
    entity_id: binary_sensor.garage_frontyard
    to: 'off'
  action:
    service_template: >
           {% if is_state("binary_sensor.garage_frontyard", "on") %}
             switch.turn_on
           {% elif is_state("binary_sensor.garage_frontyard", "off") %}
             switch.turn_off
           {% else %}
           {% endif %}
    entity_id: switch.garage_lights_switch

- alias: Turn on garage lights from backyard
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_backyard_door
    to: 'on'
  action:
    service: switch.turn_on
    entity_id: switch.garage_lights_switch

- alias: Turn off garage lights from backyard
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_backyard_door
    to: 'off'
  condition:
    condition: state
    entity_id: binary_sensor.garage_frontyard
    state: 'off'
  action:
  - service: switch.turn_off
    entity_id: switch.garage_lights_switch

- alias: Turn off garage lights if backyard left open for 15 minutes
  trigger:
  - platform: state
    entity_id: binary_sensor.garage_backyard_door
    to: 'on'
    for:
      minutes: 15
  - platform: state
    entity_id: switch.garage_lights_switch
    to: 'on'
    for:
      minutes: 15
  condition:
    condition: state
    entity_id: binary_sensor.garage_frontyard
    state: 'off'
  action:
  - wait_template: "{{ states.binary_sensor.garage_motion_sensor.state == 'off' }}"
  - service: switch.turn_off
    entity_id: switch.garage_lights_switch

# - alias: Christmas Lights
  # trigger:
  # - platform: state
    # entity_id: input_boolean.night_mode
    # to: 'on'
  # - event: sunset
    # platform: sun
    # offset: '-00:30:00'
  # action:
    # service: script.turn_on 
    # data_template:
      # entity_id: >
       # {% if trigger.entity_id == 'input_boolean.night_mode' %}
         # script.christmas_off
       # {% else %}
         # script.christmas_on
       # {% endif %}

################################################
#
#      Rain and Windows Open
#
################################################

- alias: Rain and Windows Open
  trigger:
  - platform: state
    entity_id: binary_sensor.shokabow_weather_rain
    to: 'on'
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.office_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_window
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: group.sprinklers
      state: 'off'
    - condition: state
      entity_id: binary_sensor.windows
      state: 'on'
    - condition: state
      entity_id: binary_sensor.shokabow_weather_rain
      state: 'on'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
  action:
  # - service: notify.chrome
    # data_template:
      # message: "It's raining and the following windows are open{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
      #{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}"
  - service: notify.discord
    data_template:
      message: "Its raining and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Its raining and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: shell_command.rain_window
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: "Its raining and {% if is_state('binary_sensor.den_window', 'on') %}Den Window Open{% endif %} {% if is_state('binary_sensor.kitchen_window', 'on') %}Kitchen Window Open{% endif %} {% if is_state('binary_sensor.living_room_side_window', 'on') %}Living Room Side Window Open{% endif %} {% if is_state('binary_sensor.living_room_right_bay_window', 'on') %}Living Room Right Bay Window Open{% endif %} {% if is_state('binary_sensor.living_room_left_bay_window', 'on') %}Living Room Left Bay Window Open{% endif %} {% if is_state('binary_sensor.bedroom_window', 'on') %}Bedroom Window Open{% endif %} {% if is_state('binary_sensor.office_window', 'on') %}Office Window Open{% endif %} {% if is_state('binary_sensor.bathroom_window', 'on') %}Bathroom Window Open{% endif %}"
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
        
- alias: Thermostat on and window open
  trigger:
  - platform: state
    entity_id: binary_sensor.den_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_right_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_side_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.living_room_left_bay_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.kitchen_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.office_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_window
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_window
    to: 'on'
  - platform: template
    value_template: "{{ states.climate.thermostat_heating_1.attributes.operation_mode != 'off' }}"
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.windows
      state: 'on'
    - condition: template
      value_template: "{{ states.climate.thermostat_heating_1.attributes.operation_mode != 'off' }}"
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.shower_mode
      state: 'off'
  action:
  # - service: notify.chrome
    # data_template:
      # message: "The thermostat is on and the following windows are open{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
      #{% if is_state('binary_sensor.den_window', 'on') %} Den Window{% endif %}{% if is_state('binary_sensor.kitchen_window', 'on') %} Kitchen Window{% endif %}{% if is_state('binary_sensor.living_room_side_window', 'on') %} Living Room Side Window{% endif %}{% if is_state('binary_sensor.living_room_right_bay_window', 'on') %} Living Room Right Bay Window{% endif %}{% if is_state('binary_sensor.living_room_left_bay_window', 'on') %} Living Room Left Bay Window{% endif %}{% if is_state('binary_sensor.bedroom_window', 'on') %} Bedroom Window{% endif %}{% if is_state('binary_sensor.office_window', 'on') %} Office Window{% endif %}{% if is_state('binary_sensor.bathroom_window', 'on') %} Bathroom Window{% endif %}"
  - service: notify.discord
    data_template:
      message: "The thermostat is on and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The thermostat is on and the following windows are open: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.all_windows', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}"
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: shell_command.thermostat_window
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: "The thermostat is on and {% if is_state('binary_sensor.den_window', 'on') %}Den Window Open{% endif %} {% if is_state('binary_sensor.kitchen_window', 'on') %}Kitchen Window Open{% endif %} {% if is_state('binary_sensor.living_room_side_window', 'on') %}Living Room Side Window Open{% endif %} {% if is_state('binary_sensor.living_room_right_bay_window', 'on') %}Living Room Right Bay Window Open{% endif %} {% if is_state('binary_sensor.living_room_left_bay_window', 'on') %}Living Room Left Bay Window Open{% endif %} {% if is_state('binary_sensor.bedroom_window', 'on') %}Bedroom Window Open{% endif %} {% if is_state('binary_sensor.office_window', 'on') %}Office Window Open{% endif %} {% if is_state('binary_sensor.bathroom_window', 'on') %}Bathroom Window Open{% endif %}"
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
        
################################################
#
#      Night time automations
#
################################################   

- alias: Colorful at night
  trigger:
  - platform: sun
    event: sunset
    offset: "00:01:00"
  - platform: state
    entity_id: alarm_control_panel.home
    from: 'armed_away'
    to: 'disarmed'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
  action:
  - service: scene.turn_on
    entity_id: scene.colorful

- alias: Turn off fan if house is cold
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_temperature
    below: 65
  condition:
    condition: state
    entity_id: switch.bedroom_fan
    state: 'on'
  action:
  - service: switch.turn_off
    entity_id: switch.bedroom_fan
  - condition: state
    entity_id: switch.house_fan
    state: 'on'
  - service: switch.turn_off
    entity_id: switch.house_fan

- alias: Turn on sleep tracking on our phones
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  action:
  - service: switch.turn_on
    entity_id: switch.tasker_sleep_danny, switch.tasker_sleep_tosh
    
- alias: Turn off thermostat if left on during night mode
  trigger:
  - platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  - platform: state
    entity_id: climate.thermostat_cooling_1
    to: 'cool'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
    - condition: state
      entity_id: climate.thermostat_cooling_1
      state: 'cool'
  action:
  - delay: "00:01:00"
  - wait_template: "{{ states('sensor.thermostat_temperature')|int <= state_attr('climate.thermostat_cooling_1', 'temperature') }}"
  - service: climate.set_operation_mode
    data:
      entity_id: climate.thermostat_cooling_1
      operation_mode: 'off'

- alias: Cool down house while sleeping
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_temperature
    above: 75
  - platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
    - condition: numeric_state
      entity_id: sensor.thermostat_temperature
      above: 75
  action:
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat_cooling_1
      temperature: 74
  - service: climate.set_operation_mode
    data:
      entity_id: climate.thermostat_cooling_1
      operation_mode: 'cool'

##################################################
#
#      Alarm Off Automations
#
################################################

- alias: Lights On When Alarm Off
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    from: 'armed_away'
    to: 'disarmed'
  action:
  - service: light.turn_on
    entity_id: light.den_lights_level
  - service: light.turn_on
    entity_id: light.kitchen_lights_level
  - service: light.turn_on
    entity_id: light.living_room_lights_level
  - service: switch.turn_off
    entity_id: switch.siren_switch
  - condition: state
    entity_id: climate.thermostat_cooling_1
    state: cool
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat_cooling_1
      temperature: 76

################################################
#
#      Smoke Notifications
#
################################################

- alias: Smoke Detected
  trigger:
  - platform: state
    entity_id: sensor.den_smoke_status
    to: 'Fire'
  - platform: state
    entity_id: sensor.bedroom_smoke_status
    to: 'Fire'
  - platform: state
    entity_id: sensor.office_smoke_status
    to: 'Fire'
  action:
  - service: notify.slack
    data_template:
      message: "Smoke detected at home {{ trigger.to_state.attributes.friendly_name }}"
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: 'Smoke Detected! {{ trigger.to_state.attributes.friendly_name }}'
      title: Shokabow Zoo
  # - service: notify.chrome
    # data_template:
      # message: "Smoke Detected {{ trigger.to_state.attributes.friendly_name }}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "Smoke detected at home {{ trigger.to_state.attributes.friendly_name }}"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Smoke detected at home {{ trigger.to_state.attributes.friendly_name }}"

- alias: CO2 Detected
  trigger:
  - platform: state
    entity_id: sensor.den_smoke_status
    to: 'CO2'
  - platform: state
    entity_id: sensor.bedroom_smoke_status
    to: 'CO2'
  - platform: state
    entity_id: sensor.office_smoke_status
    to: 'CO2'
  action:
  - service: notify.slack
    data_template:
      message: "CO2 detected at home {{ trigger.to_state.attributes.friendly_name }}"
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: 'CO2 Detected! {{ trigger.to_state.attributes.friendly_name }}'
      title: Shokabow Zoo
  # - service: notify.chrome
    # data_template:
      # message: "CO2 Detected  {{ trigger.to_state.attributes.friendly_name }}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "CO2 detected at home {{ trigger.to_state.attributes.friendly_name }}"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "CO2 Detected {{ trigger.to_state.attributes.friendly_name }}"

################################################
#
#      Cast Automations
#
################################################

- alias: Stop Playing When Input Select Is Off
  trigger:
  - platform: state
    entity_id: input_select.radio_station
    to: "None"
  action:
  - service: media_player.turn_off
    data_template:
      entity_id: >
              {% if is_state("input_select.cast_devices", "Living Room") %}
                media_player.living_room_home
              {%-elif is_state("input_select.cast_devices", "Whole House") %}
                media_player.house
              {%-elif is_state("input_select.cast_devices", "Outside") %}
                media_player.outside_speakers
              {%-elif is_state("input_select.cast_devices", "Den") %}
                media_player.den_home_hub
              {%-elif is_state("input_select.cast_devices", "Office") %}
                media_player.office_speaker
              {%-elif is_state("input_select.cast_devices", "Kitchen") %}
                media_player.kitchen_home
              {%-elif is_state("input_select.cast_devices", "Bathroom") %}
                media_player.bathroom_speaker
              {%-elif is_state("input_select.cast_devices", "Bedroom") %}
                media_player.bedroom_home
              {% else %}
                "None"
              {% endif %}

- alias: Cast Media Based On Input Select
  trigger:
  - platform: state
    entity_id: input_select.radio_station
  action:
  - service: media_player.play_media
    data_template:
      entity_id: >
            {% if is_state("input_select.cast_devices", "Living Room") %}
              media_player.living_room_home
            {%-elif is_state("input_select.cast_devices", "Whole House") %}
              media_player.house
            {%-elif is_state("input_select.cast_devices", "Outside") %}
              media_player.outdoor_speakers
            {%-elif is_state("input_select.cast_devices", "Den") %}
              media_player.den_home_hub
            {%-elif is_state("input_select.cast_devices", "Office") %}
              media_player.office_speaker
            {%-elif is_state("input_select.cast_devices", "Kitchen") %}
              media_player.kitchen_home
            {%-elif is_state("input_select.cast_devices", "Bathroom") %}
              media_player.bathroom_speaker
            {%-elif is_state("input_select.cast_devices", "Bedroom") %}
              media_player.bedroom_home
            {% else %}
              "None"
            {% endif %}
      media_content_id: >
            {% if is_state("input_select.radio_station", "KROQ") %}
              http://15363.live.streamtheworld.com:80/KROQFMDIALUP_SC
            {%-elif is_state("input_select.radio_station", "Jack FM") %}
              http://17793.live.streamtheworld.com:80/KCBSFMDIALUP_SC
            {%-elif is_state("input_select.radio_station", "Nova 100") %}
              http://streaming.novaentertainment.com.au/nova100
            {%-elif is_state("input_select.radio_station", "SmoothFM") %}
              http://streaming.novaentertainment.com.au/smooth915 
            {%-elif is_state("input_select.radio_station", "SBS Chill") %}
              http://shoutcast.sbs.com.au/SBSChill
            {% else %}
              "None"
            {% endif %}
      media_content_type: 'audio/mp4'

################################################
#
#      Zwave/Zha Automations
#
################################################

- alias: Notify zwave device died
  trigger:
    platform: template
    value_template: >
      {%- for state in states.zwave -%}
        {%- if state.state == "dead" -%}
          true
        {%- endif -%}
      {%- endfor -%}
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.friendly_name != 'Notify zwave device died' }}"
  action:
  # - service: notify.chrome
    # data_template:
      # message: "node {{ trigger.entity_id }} has died"
      # target: danny_pixel
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} has died"
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "{{ trigger.to_state.attributes.friendly_name }} has died"

- alias: Notify zha device died
  trigger:
    platform: template
    value_template: >
      {%- for state in states.zha -%}
        {%- if state.state == "unavailable" -%}
          true
        {%- endif -%}
      {%- endfor -%}
  action:
  # - service: notify.chrome
    # data_template:
      # message: "node {{ trigger.entity_id }} has died"
      # target: danny_pixel
      # title: Shokabow Zoo
  - delay: '00:30:00'
  - condition: template
    value_template: >
      {%- for state in states.zha -%}
        {%- if state.state == "unavailable" -%}
          true
        {%- endif -%}
      {%- endfor -%}
  - service: notify.discord
    data_template:
      message: "The following ZHA devices have died: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.zha', 'entity_id'))|list)|groupby('state'))['offline']|map(attribute='name')|list|join(', ') }}"
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "The following ZHA devices have died: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.zha', 'entity_id'))|list)|groupby('state'))['offline']|map(attribute='name')|list|join(', ') }}"

# - alias: Notify zwave network ready
  # trigger:
    # platform: event
    # event_type: zwave.network_ready
  # action:
  # - service: notify.slack
    # data:
      # message: "The Z-Wave network is now ready"
      
################################################
#
#      Bayesian Automations
#
################################################

- alias: Notify bayesian on
  trigger:
    platform: state
    entity_id: binary_sensor.dannys_bayesian_presence
    to: 'on'
  condition:
    condition: state
    entity_id: switch.tasker_sleep_danny
    state: 'off'
  action:
  # - service: notify.chrome
    # data:
      # message: "Welcome home, do you need help?"
      # target: danny_pixel
      # title: Shokabow Zoo
      # data:
        # actions:
        # - action: "help"
          # title: "Yes"
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "Welcome home! Do you need help? Type 'help' or 'yes' if yes."

- alias: Notify help needed at cars
  trigger:
    platform: event
    event_type: html5_notification.clicked
    event_data:
      action: help
  action:
  - service: shell_command.boogie_help
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: 'Boogie, I need help outside'
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
        
- alias: Notify bayesian off
  trigger:
    platform: state
    entity_id: binary_sensor.dannys_bayesian_presence
    to: 'off'
  condition:
    condition: state
    entity_id: switch.tasker_sleep_danny
    state: 'off'
  action:
  # - service: notify.chrome
    # data:
      # message: "You are not home, did you forget anything?"
      # target: danny_pixel
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "You are not home, did you forget anything?"
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "You are not home, did you forget anything?"
      
- alias: Notify bayesian on tosh
  trigger:
    platform: state
    entity_id: binary_sensor.natachas_bayesian_presence
    to: 'on'
  condition:
    condition: state
    entity_id: switch.tasker_sleep_tosh
    state: 'off'
  action:
  # - service: notify.chrome
    # data:
      # message: "Welcome home, do you need help?"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
      # data:
        # actions:
        # - action: "help"
          # title: "Yes"
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Welcome home boogie! Do you need help? Type 'help' or 'yes' if yes."

- alias: Notify bayesian off tosh
  trigger:
    platform: state
    entity_id: binary_sensor.natachas_bayesian_presence
    to: 'off'
  condition:
    condition: state
    entity_id: switch.tasker_sleep_tosh
    state: 'off'
  action:
  # - service: notify.chrome
    # data:
      # message: "Tosh has left the zoo.  Did you forget anything?"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "Tosh has left the zoo.  Did you forget anything?"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Tosh has left the zoo.  Did you forget anything?"

- alias: Tosh awake and left
  trigger:
    platform: state
    entity_id: device_tracker.google_maps_104359830266586918986
    to: 'not_home'
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: switch.tasker_sleep_tosh
      state: 'on'
    - condition: state
      entity_id: sun.sun
      state: 'above_horizon'
  action:
  - service: switch.turn_on
    entity_id: switch.tasker_awake_tosh
  - delay: "00:01:00"
  - service: switch.turn_off
    entity_id: switch.tasker_awake_tosh, switch.tasker_sleep_tosh
  - delay: "00:01:00"
  - condition: state
    entity_id: group.tracked_users
    state: not_home
  - service: alarm_control_panel.alarm_arm_away
    data:
      entity_id: alarm_control_panel.home

################################################
#
#      Thermostat Automations
#
################################################

- alias: Cool down house if thermostat gets above 80
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_temperature
    above: 79
  action:
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat_cooling_1
      #operation_mode: 'Cool'
      temperature: 78
  - service: climate.set_operation_mode
    data:
      entity_id: climate.thermostat_cooling_1
      operation_mode: 'cool'

- alias: Set thermostat cooling if on and house is armed
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: climate.thermostat_cooling_1
      state: 'cool'
    - condition: template
      value_template: "{{ states.climate.thermostat_cooling_1.attributes.temperature < 78 }}"
  action:
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat_cooling_1
      temperature: 78

- alias: Set thermostat heating if on and house is armed
  trigger:
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: climate.thermostat_heating_1
      state: 'heat'
    - condition: template
      value_template: "{{ states.climate.thermostat_heating_1.attributes.temperature > 70 }}"
  action:
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat_heating_1
      temperature: 70

- alias: Open windows if ac is on and its cooler outside
  trigger:
  - platform: state
    entity_id: climate.thermostat_cooling_1
    to: 'cool'
  - platform: state
    entity_id: sensor.inside_outside_temp
    to: 'True'
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'disarmed'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sensor.inside_outside_temp
      state: 'True'
    - condition: state
      entity_id: climate.thermostat_cooling_1
      state: 'cool'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
  action:
  - wait_template: "{{ state_attr('climate.thermostat_cooling_1', 'temperature') == states('sensor.thermostat_temperature') | int }}"
  - condition: state
    entity_id: sensor.inside_outside_temp
    state: 'True'
  - service: notify.discord
    data_template:
      message: "Please open a window and turn off the thermostat.  It is {{ states('sensor.thermostat_temperature') }} {{ state_attr('sensor.thermostat_temperature', 'unit_of_measurement') }} inside compared to {{ states('sensor.shokabow_weather_temperature') }} {{ state_attr('sensor.shokabow_weather_temperature', 'unit_of_measurement') }} outside."
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Please open a window and turn off the thermostat.  It is {{ states('sensor.thermostat_temperature') }} {{ state_attr('sensor.thermostat_temperature', 'unit_of_measurement') }} inside compared to {{ states('sensor.shokabow_weather_temperature') }} {{ state_attr('sensor.shokabow_weather_temperature', 'unit_of_measurement') }} outside."

- alias: Heat up house if below 63
  trigger:
  - platform: numeric_state
    entity_id: sensor.thermostat_temperature
    below: 63
  action:
  - service: climate.set_operation_mode
    data:
      entity_id: climate.thermostat_heating_1
      operation_mode: 'heat'
  - service: climate.set_temperature
    data:
      entity_id: climate.thermostat_heating_1
      temperature: 67
  - wait_template: "{{ state_attr('climate.thermostat_heating_1', 'temperature') == states('sensor.thermostat_temperature') | int }}"
  - delay: "00:01:00"
  - service: climate.set_operation_mode
    data:
      entity_id: climate.thermostat_heating_1
      operation_mode: 'off'

################################################
#
#      Movie Mode Automations
#
################################################

- alias: Movie mode turned on
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'on'
  action:
  - service: light.turn_on
    entity_id: light.tv_lights
    data:
      brightness_pct: 100
      kelvin: 6500
  - service: light.turn_off
    entity_id: light.kitchen_lights_level, light.corner_lamp, light.patio, light.living_room_lights_level, light.office_lights, light.bedroom_lights_level
  - service: switch.turn_off
    entity_id: switch.island_lights_switch
  - condition: state
    entity_id: switch.fireplace
    state: 'off'
  - service: switch.turn_on
    entity_id: switch.fireplace

- alias: Movie mode watch pc
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'on'
  condition:
    condition: template
    value_template: "{{ states.remote.harmony_hub_den.attributes.current_activity == PowerOff }}"
  action:
    service: switch.turn_on
    entity_id: switch.den_shield
    
- alias: Movie mode curtains if sun is above horizon
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'on'
  condition:
    condition: state
    entity_id: sun.sun
    state: above_horizon
  action:
  - service: cover.close_cover
    entity_id: cover.den_curtains
    
- alias: Turn off lights when movie plays
  trigger:
    platform: state
    entity_id: media_player.kodi_den, media_player.kodi_shield
    to: 'playing'
  condition:
    condition: state
    entity_id: input_boolean.movie_mode
    state: 'on'
  action:
  - service: light.turn_off
    entity_id: light.den_lights_level, light.kitchen_lights_level, light.living_room_lights_level, light.patio, light.corner_lamp
  - service: switch.turn_off
    entity_id: switch.island_lights_switch
    
- alias: Turn on lights when movie paused
  trigger:
  - platform: state
    entity_id: media_player.kodi_den, media_player.kodi_shield
    to: 'paused'
    for:
      seconds: 30
  - platform: state
    entity_id: media_player.kodi_den, media_player.kodi_shield
    to: 'idle'
    for:
      minutes: 1
  condition:
    condition: state
    entity_id: input_boolean.movie_mode
    state: 'on'
  action:
  - service: light.turn_on
    entity_id: light.kitchen_lights_level
  - service: light.turn_on
    entity_id: light.den_lights_level
    data:
      brightness_pct: 10

- alias: Movie mode turned off and den curtains were closed
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.den_curtains
    state: 'off'
  action:
  - service: cover.open_cover
    entity_id: cover.den_curtains
    
- alias: Movie mode off when harmony hub turns off
  trigger:
    platform: state
    entity_id: remote.harmony_hub_den
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.movie_mode
    state: 'on'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.movie_mode
    
- alias: Turn off den lights if movie is already playing when movie mode turned on
  trigger:
    platform: state
    entity_id: input_boolean.movie_mode
    to: 'on'
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: media_player.kodi_den
      state: playing
    - condition: state
      entity_id: media_player.kodi_shield
      state: playing
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ states.remote.harmony_hub_den.attributes.current_activity != "PowerOff" }}'
  action:
    service: light.turn_off
    entity_id: light.den_lights_level
    
################################################
#
#      Water Heater Notification
#
################################################

- alias: Water heater notification
  trigger:
    platform: state
    entity_id: binary_sensor.water_leak_sensor_158d0001bc24f5
    to: 'on'
  condition:
    condition: state
    entity_id: binary_sensor.shokabow_weather_rain
    state: 'off'
  action:
  # - service: notify.chrome
    # data:
      # message: "The water heater is leaking"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "The water heater is leaking."
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "The water heater is leaking."
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: shell_command.water_heater_leak
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: 'The water heater is leaking'
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
        
- alias: Water heater and rain notification
  trigger:
    platform: state
    entity_id: binary_sensor.water_leak_sensor_158d0001bc24f5
    to: 'on'
  condition:
    condition: state
    entity_id: binary_sensor.shokabow_weather_rain
    state: 'on'
  action:
  # - service: notify.chrome
    # data:
      # message: "There is rain getting into the water heater"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "There is rain getting into the water heater."
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "There is rain getting into the water heater."
  - condition: state
    entity_id: group.tracked_users
    state: 'home'
  - service: shell_command.rain_water_heater
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: 'There is rain getting into the water heater'
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
        
################################################
#
#      Battery Notification
#
################################################

- alias: Battery Alert
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '18:00:00'
  condition:
    - condition: template
      value_template: >
          {%- set threshold = 25 -%}
          {% macro battery_level() %}
          {% set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] %}
          {% for domain in domains -%}
          {% for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
          {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
          {{ item.name }}{% endif -%}
          {% if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
          {{ item.name }}{% endif -%}
          {% endfor %}
          {%- endfor %}
          {% endmacro %}
          {{ battery_level() |trim != "" }}
  action:
    - service: persistent_notification.create
      data_template:
        title: "Low Battery levels"
        notification_id: low-battery-alert
        message: >
          {%- set threshold = 25 -%}
          {% macro battery_level(domain) %}
          {%- for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
          {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
          {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{%- endif -%}
          {%- if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
          {{ item.name }} ({{ item.state }}){% if not loop.last %}, {% endif %}{% endif -%}
          {%- endfor -%}
          {% endmacro %}
          {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] -%}
          {%- for domain in domains if battery_level(domain) |trim != ""-%}
          {{ battery_level(domain) }}{%- if not loop.last %}, {% endif -%}
          {%- endfor -%}
    # - service: notify.chrome
      # data_template:
        # title: "Battery status"
        # target: ["danny_pixel", "tosh_phone"]
        # message: >
    - service: notify.discord
      data_template:
        message: >
             {% macro battery_level() %}
             {%- set threshold = 25 -%}
             {% set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] %}
             {% for domain in domains -%}
             {% for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
             {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
             {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{% endif -%}
             {% if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
             {{ item.name }} ({{ item.state }}){% if not loop.last %}, {%- endif %} {% endif -%}
             {% endfor %}
             {%- endfor %}
             {% endmacro %}
             {{ battery_level()}}
        target:
        - !secret discord_house
    - service: hangouts.send_message
      data_template:
        target:
        - id: !secret hangouts_group
        message:
        - text: >
             {% macro battery_level() %}
             {%- set threshold = 25 -%}
             {% set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] %}
             {% for domain in domains -%}
             {% for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
             {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
             {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{% endif -%}
             {% if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
             {{ item.name }} ({{ item.state }}){% if not loop.last %}, {%- endif %} {% endif -%}
             {% endfor %}
             {%- endfor %}
             {% endmacro %}
             {{ battery_level()}}

- alias: Battery Alert Clear
  trigger:
    - platform: time_pattern
      minutes: '/30'
      seconds: 00
  condition:
    - condition: template
      value_template: >
        {%- set threshold = 25 -%}
        {% macro battery_level() %}
        {% set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] %}
        {% for domain in domains -%}
        {% for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
        {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
        {{ item.name }}{% endif -%}
        {% if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
        {{ item.name }}{% endif -%}
        {% endfor %}
        {%- endfor %}
        {% endmacro %}
        {{ battery_level() |trim == "" }}
  action:
    - service: persistent_notification.dismiss
      data:
        notification_id: low-battery-alert
        
################################################
#
#      Xiaomi Price Notification
#
################################################

# - alias: Xiaomi Air Purifier Price
  # trigger:
  # - platform: numeric_state
    # entity_id: sensor.xiaomi_air_purifier_2
    # below: 130
  # action:
  # - service: notify.chrome
    # data:
      # message: "Price dropped below $130 for air purifier. Click to buy!"
      # target: danny_pixel
      # title: Shokabow Zoo
      # data:
        # url: 'https://www.gearbest.com/home-smart-improvements/pp_268522.html'
        
# - alias: Xiaomi Leak Sensor Price
  # trigger:
  # - platform: numeric_state
    # entity_id: sensor.xiaomi_leak_sensor
    # below: 10
  # action:
  # - service: notify.chrome
    # data:
      # message: "Price dropped below $10 for leak sensor. Click to buy!"
      # target: danny_pixel
      # title: Shokabow Zoo
      # data:
        # url: 'https://www.gearbest.com/home-smart-improvements/pp_668897.html'
        
################################################
#
#      Log Notification
#
################################################

# - alias: Create notifications for "timer" errors
  # trigger:
    # platform: event
    # event_type: system_log_event
  # condition:
    # condition: template
    # value_template: '{{ "Timer" in trigger.event.data.message }}'
  # action:
  # - service: persistent_notification.create
    # data_template:
      # title: Something bad happened
      # message: '{{ trigger.event.data.message }}'
  # - service: notify.chrome
    # data:
      # message: "Timer out of sync"
      # target: danny_pixel
      # title: Shokabow Zoo
  # - service: hangouts.send_message
    # data:
      # target:
      # - id: !secret hangouts_danny
      # message:
      # - text: "Timer out of sync"
  
- alias: Timer out of sync
  trigger:
    platform: event
    event_type: timer_out_of_sync
  action:
  - service: notify.discord
    data_template:
      message: "Timer out of sync."
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "Timer out of sync"

################################################
#
#      Download Automations
#
################################################

- alias: Speed test
  trigger:
    - platform: time
      at: "01:00:00"
    - platform: time
      at: "05:00:00"
    - platform: time
      at: "13:00:00"
    - platform: time
      at: "17:00:00"
  condition:
    - condition: template
      value_template: "{{ states('sensor.plex')|int == 0 }}"
    - condition: template
      value_template: "{{ states('sensor.sabnzbd_speed')|int == 0 }}"
  action:
    - service: speedtestdotnet.speedtest

- alias: Notify PC offline
  trigger:
    platform: state
    entity_id: switch.tosh_w10, switch.blue_iris, switch.vostros
    to: 'off'
    for:
      minutes: 10
  action:
  - service: notify.discord
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} offline"
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "{{ trigger.to_state.attributes.friendly_name }} offline"

################################################
#
#      Numeric automations
#
################################################

- alias: Certificate Expiring
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '18:00:00'
  condition:
    condition: numeric_state
    entity_id: sensor.ssl_certificate_expiry
    below: 5
  action:
  # - service: notify.chrome
    # data:
      # message: "Certificate expiring in {{ states.sensor.ssl_certificate_expiry.state }} days!"
      # target: danny_pixel
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "Certificate expiring in {{ states.sensor.ssl_certificate_expiry.state }} days!"
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "Certificate expiring in {{ states.sensor.ssl_certificate_expiry.state }} days!"

- alias: Disk Getting Full
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '18:00:00'
  condition:
    condition: numeric_state
    entity_id: sensor.disk_use_percent_home
    above: 50
  action:
  # - service: notify.chrome
    # data:
      # message: "Home assistant drive getting full, over 50%! Check journal and zoneminder."
      # target: danny_pixel
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "Home assistant drive getting full, over 50%! Check journal and zoneminder."
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "Home assistant drive getting full, over 50%! Check journal and zoneminder."

################################################
#
#      Shower Automations
#
################################################

- alias: Shower Mode Turned On
  trigger:
    platform: state
    entity_id: input_boolean.shower_mode
    to: 'on'
  action:
  - service: switch.turn_on
    entity_id: switch.house_fan
  - service: media_player.play_media
    data:
      entity_id: media_player.bathroom_speaker
      media_content_id: "http://15363.live.streamtheworld.com:80/KROQFMDIALUP_SC"
      media_content_type: "audio/mp4"
      
- alias: Shower Mode Turned Off
  trigger:
    platform: state
    entity_id: input_boolean.shower_mode
    to: 'off'
  action:
  - service: media_player.media_stop
    entity_id: media_player.bathroom_speaker
  - wait_template: "{{ states('sensor.bathroom_humidity') | int < 60 }}"
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: switch.turn_off
    entity_id: switch.house_fan
    
- alias: Shower Mode On and bathroom window still open
  trigger:
    platform: state
    entity_id: input_boolean.shower_mode
    to: 'on'
    for:
      minutes: 2
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.bathroom_window
      state: 'off'
    - condition: state
      entity_id: binary_sensor.bathroom_door
      state: 'off'
  action:
  - service: media_player.media_play_pause
    entity_id: media_player.bathroom_speaker
  - service: tts.google_say
    entity_id: media_player.bathroom_speaker
    data:
      message: "Please open the bathroom window"
  - delay: "00:00:02"
  - service: media_player.play_media
    data:
      entity_id: media_player.bathroom_speaker
      media_content_id: "http://15363.live.streamtheworld.com:80/KROQFMDIALUP_SC"
      media_content_type: "audio/mp4"
    
- alias: Shower mode off if bathroom speaker not playing or humidity drops below 60
  trigger:
  - platform: state
    entity_id: media_player.bathroom_speaker
    to: 'paused'
    for:
      minutes: 30
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
  - platform: state
    entity_id: media_player.bathroom_speaker
    to: 'off'
    for:
      minutes: 5
  - platform: numeric_state
    entity_id: sensor.bathroom_humidity
    below: 60
  condition:
    condition: state
    entity_id: input_boolean.shower_mode
    state: 'on'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.shower_mode
    
- alias: Shower mode on when humidity above 65
  trigger:
    platform: numeric_state
    entity_id: sensor.bathroom_humidity
    above: 65
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.shower_mode
    
- alias: Play music again if interrupted
  trigger:
  - platform: state
    entity_id: media_player.bathroom_speaker
    to: 'idle'
    for:
      seconds: 20
  - platform: state
    entity_id: media_player.home_notification
    to: 'idle'
    for:
      seconds: 20
  condition:
    condition: state
    entity_id: input_boolean.shower_mode
    state: 'on'
  action:
  - service: media_player.play_media
    data:
      entity_id: media_player.bathroom_speaker
      media_content_id: "http://15363.live.streamtheworld.com:80/KROQFMDIALUP_SC"
      media_content_type: "audio/mp4"
      
################################################
#
#      Motion Light Automations
#
################################################

- alias: Bedroom Motion Light On
  trigger:
  - platform: state
    entity_id: binary_sensor.bedroom_motion_sensor
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bedroom_door
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
  action:
  - service: light.turn_on
    data_template:
      entity_id: >
          {%- if (now().hour < 22 and now().hour > 15) -%}
            light.bedroom_lights_level
          {%- else -%}
            light.dannys, light.toshs
          {%- endif -%}

- alias: Bedroom Motion Lights Off
  trigger:
    platform: state
    entity_id: binary_sensor.bedroom_motion_sensor
    to: 'off'
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: binary_sensor.bedroom_door
      state: 'off'
  action:
  - service: light.turn_off
    entity_id: light.bedroom_lights_level, light.dannys, light.toshs

- alias: Turn off living room lights when no motion
  trigger:
    platform: state
    entity_id: binary_sensor.living_room_camera_motion_detected
    to: 'off'
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: light.living_room_lights_level
      state: 'on'
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: switch.kitchen_tv
      state: 'off'
    - condition: state
      entity_id: input_boolean.cleaning_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.sleeping
      state: 'off'
  action:
    service: light.turn_off
    entity_id: light.living_room_lights_level

- alias: Turn off kitchen lights when no motion
  trigger:
    platform: state
    entity_id: binary_sensor.baby_monitor_motion_detected
    to: 'off'
    for:
      minutes: 4
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: switch.kitchen_tv
      state: 'off'
    - condition: state
      entity_id: input_boolean.cleaning_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.sleeping
      state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: light.kitchen_lights_level
        state: 'on'
      - condition: state
        entity_id: switch.island_lights_switch
        state: 'on'
  action:
  - service: light.turn_off
    entity_id: light.kitchen_lights_level
  - service: switch.turn_off
    entity_id: switch.island_lights_switch

- alias: Turn off office lights when no motion
  trigger:
    platform: state
    entity_id: binary_sensor.office_motion, binary_sensor.office_door
    to: 'off'
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: light.office_lights
      state: 'on'
    - condition: state
      entity_id: binary_sensor.office_closet_door
      state: 'off'
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: binary_sensor.office_door
      state: 'off'
    - condition: state
      entity_id: binary_sensor.office_motion
      state: 'off'
    - condition: state
      entity_id: input_boolean.sleeping
      state: 'off'
  action:
    service: light.turn_off
    entity_id: light.office_lights
    
- alias: Turn on office lights when motion
  trigger:
    platform: state
    entity_id: binary_sensor.office_motion, binary_sensor.office_door
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: light.office_lights
      state: 'off'
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: input_boolean.sleeping
      state: 'off'
  action:
    service: light.turn_on
    entity_id: light.office_lights

- alias: Hallway light motion at night
  trigger:
    platform: state
    entity_id: binary_sensor.hallway_motion_sensor
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'on'
    - condition: state
      entity_id: sun.sun
      state: below_horizon
  action:
    service: script.turn_on
    entity_id: script.light_at_night

################################################
#
#      Ring Automations
#
################################################

- alias: Motion at front door
  trigger:
    platform: state
    entity_id: binary_sensor.ring_front_door_motion
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.home
      state: disarmed
    - condition: state
      entity_id: lock.front_door_lock_locked
      state: locked
  action:
  - service: notify.den
    data:
      data:
        color: teal
      message: There is motion at the front door
      title: Shokabow Zoo
  
- alias: Ding Dong at front door
  trigger:
    platform: state
    entity_id: binary_sensor.ring_front_door_ding
    to: 'on'
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: disarmed
  action:
  - service: notify.den
    data:
      data:
       color: teal
      message: Someone is at the front door
      title: Shokabow Zoo
      
################################################
#
#      Sink Leaking Automations
#
################################################

- alias: Sink is leaking
  trigger:
  - platform: state
    entity_id: binary_sensor.kitchen_sink_leak_sensor
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bar_sink_leak_sensor
    to: 'on'
  - platform: state
    entity_id: binary_sensor.bathroom_sink_leak_sensor
    to: 'on'
  action:
  - service: notify.slack
    data_template:
      message: "Leak detected at home {{ trigger.to_state.attributes.friendly_name }}"
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: 'Leak Detected! {{ trigger.to_state.attributes.friendly_name }}'
      title: Shokabow Zoo
  # - service: notify.chrome
    # data_template:
      # message: "Leak Detected {{ trigger.to_state.attributes.friendly_name }}"
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "Leak detected at home {{ trigger.to_state.attributes.friendly_name }}"
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Leak Detected {{ trigger.to_state.attributes.friendly_name }}"

################################################
#
#      Hallway Switch Automations
#
################################################

- alias: Turn On Hallway Light Bright White
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.hallway_office_switch
      click_type: single
  action:
  - service: light.turn_on
    entity_id: light.hallway_light
    data:
      kelvin: 6500
      brightness_pct: 100
      
- alias: Turn On Hallway Light Color
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.hallway_office_switch
      click_type: long_click_press
  action:
  - service: light.turn_on
    data:
      entity_id: light.hallway_light
      brightness_pct: 40
      color_name: 'green'

- alias: Turn Off Hallway Light From Switch
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.hallway_office_switch
      click_type: double
  action:
  - service: light.turn_off
    entity_id: light.hallway_light

- alias: Toggle patio lights
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.patio_switch
      click_type: single
  action:
    service: light.toggle
    entity_id: light.patio

- alias: Open or Close Den Curtains
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.patio_switch
      click_type: double
  action:
    service_template: >
        {% if is_state('cover.den_curtains', 'open') %}
          cover.close_cover
        {% elif is_state('cover.den_curtains', 'closed') %}
          cover.open_cover
        {% else %}
        {% endif %}
    entity_id: cover.den_curtains

- alias: Toggle Backyard Lights
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.patio_switch
      click_type: long_click_press
  action:
    service: switch.toggle
    entity_id: switch.backyard_lights_switch

################################################
#
#      Car Presence Automations
#
################################################

- alias: Danny car
  trigger:
  - platform: state
    entity_id: binary_sensor.tsxpresence
    to: 'on'
  - platform: state
    entity_id: binary_sensor.tsxpresence
    to: 'off'
  condition:
  - condition: and
    conditions:
    - condition: template
      value_template: "{{ (is_state('binary_sensor.tsxpresence', 'off') and is_state('device_tracker.tsx', 'home')) or (is_state('binary_sensor.tsxpresence', 'on') and is_state('device_tracker.tsx', 'not_home')) }}"
    - condition: or
      conditions:
      - condition: state
        entity_id: device_tracker.tsx
        state: 'home'
        for:
          minutes: 1
      - condition: state
        entity_id: device_tracker.tsx
        state: 'not_home'
        for:
          minutes: 1
  action:
  # - service: notify.chrome
    # data_template:
      # message: >
        # {% if is_state("binary_sensor.tsxpresence", "on") %}
          # TSX turned on or arrived home
        # {% elif is_state("binary_sensor.tsxpresence", "off") %}
          # TSX turned off or left home
        # {% else %}
        # {% endif %}
      # target: danny_pixel
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: >
           {% if is_state("binary_sensor.tsxpresence", "on") %}
             TSX arrived home
           {% elif is_state("binary_sensor.tsxpresence", "off") %}
             TSX left home
           {% else %}
           {% endif %}
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_danny
      message:
      - text: >
           {% if is_state("binary_sensor.tsxpresence", "on") %}
             TSX arrived home
           {% elif is_state("binary_sensor.tsxpresence", "off") %}
             TSX left home
           {% else %}
           {% endif %}

- alias: Tosh car
  trigger:
  - platform: state
    entity_id: binary_sensor.rdxpresence
    to: 'on'
  - platform: state
    entity_id: binary_sensor.rdxpresence
    to: 'off'
  condition:
  - condition: and
    conditions:
    - condition: template
      value_template: "{{ (is_state('binary_sensor.rdxpresence', 'off') and is_state('device_tracker.rdx', 'home')) or (is_state('binary_sensor.rdxpresence', 'on') and is_state('device_tracker.rdx', 'not_home')) }}"
    - condition: or
      conditions:
      - condition: state
        entity_id: device_tracker.rdx
        state: 'home'
        for:
          minutes: 1
      - condition: state
        entity_id: device_tracker.rdx
        state: 'not_home'
        for:
          minutes: 1
  action:
  # - service: notify.chrome
    # data_template:
      # message: >
        # {% if is_state("binary_sensor.rdxpresence", "on") %}
          # RDX turned on or arrived home
        # {% elif is_state("binary_sensor.rdxpresence", "off") %}
          # RDX turned off or left home
        # {% else %}
        # {% endif %}
      # target: danny_pixel
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: >
           {% if is_state("binary_sensor.rdxpresence", "on") %}
             RDX arrived home
           {% elif is_state("binary_sensor.rdxpresence", "off") %}
             RDX left home
           {% else %}
           {% endif %}
      target:
      - !secret discord_danny
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_danny
      message:
      - text: >
           {% if is_state("binary_sensor.rdxpresence", "on") %}
             RDX arrived home
           {% elif is_state("binary_sensor.rdxpresence", "off") %}
             RDX left home
           {% else %}
           {% endif %}

################################################
#
#      BBQ Automations
#
################################################
 
- alias: BBQ Notifications
  trigger:
    platform: state
    entity_id: input_select.bbq_probe1
    from: "Select Input"
  condition:
    condition: state
    entity_id: binary_sensor.bbq1
    state: 'on'
  action:
  - wait_template: >
     {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 195 }}
     {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 195 }}
     {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 150 }}
     {% elif is_state("input_select.bbq_probe1", "Fish") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 130 }}
     {% elif is_state("input_select.bbq_probe1", "Steak") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 120 }}
     {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 145 }}
     {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 120 }}
     {%- else -%}
     {%- endif %}
  # - service: notify.chrome
    # data_template:
      # message: >
       # {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
         # Beef Ribs are almost ready
       # {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
         # Briket is almost ready
       # {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
         # Chicken is almost ready
       # {% elif is_state("input_select.bbq_probe1", "Fish") -%}
         # Fish is almost ready
       # {% elif is_state("input_select.bbq_probe1", "Steak") -%}
         # Steak is almost ready
       # {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
         # Tritip is almost ready
       # {%- else -%}
       # {%- endif %}
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: >-
          {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
            Beef Ribs are almost done
          {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
            Brisket is almost done
          {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
            Chicken is almost done
          {% elif is_state("input_select.bbq_probe1", "Fish") -%}
            Fish is almost done
          {% elif is_state("input_select.bbq_probe1", "Steak") -%}
            Steak is almost done
          {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
            Turkey is almost done
          {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
            Tritip is almost done
          {%- else -%}
          {%- endif %}
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: >-
          {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
            Beef Ribs are almost done
          {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
            Brisket is almost done
          {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
            Chicken is almost done
          {% elif is_state("input_select.bbq_probe1", "Fish") -%}
            Fish is almost done
          {% elif is_state("input_select.bbq_probe1", "Steak") -%}
            Steak is almost done
          {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
            Turkey is almost done
          {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
            Tritip is almost done
          {%- else -%}
          {%- endif %}
  - service: shell_command.bbq_almost
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: >
       # {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
         # Beef Ribs are almost ready
       # {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
         # Briket is almost ready
       # {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
         # Chicken is almost ready
       # {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
         # Tritip is almost ready
       # {%- else -%}
       # {%- endif %}
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
  - wait_template: >
     {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 205 }}
     {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 205 }}
     {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 165 }}
     {% elif is_state("input_select.bbq_probe1", "Fish") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 145 }}
     {% elif is_state("input_select.bbq_probe1", "Steak") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 130 }}
     {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 160 }}
     {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
       {{ states.sensor.bbq1_temperature.state|int >= 130 }}
     {%- else -%}
     {%- endif %}
  # - service: notify.chrome
    # data_template:
      # message: >
       # {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
         # Beef Ribs are done
       # {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
         # Briket is done
       # {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
         # Chicken is done
       # {% elif is_state("input_select.bbq_probe1", "Fish") -%}
         # Fish is done
       # {% elif is_state("input_select.bbq_probe1", "Steak") -%}
         # Steak is done
       # {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
         # Tritip is done
       # {%- else -%}
       # {%- endif %}
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: >
          {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
            Beef Ribs are done
          {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
            Brisket is done
          {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
            Chicken is done
          {% elif is_state("input_select.bbq_probe1", "Fish") -%}
            Fish is done
          {% elif is_state("input_select.bbq_probe1", "Steak") -%}
            Steak is done
          {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
            Turkey is done
          {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
            Tritip is done
          {%- else -%}
          {%- endif %}
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: >
          {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
            Beef Ribs are done
          {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
            Brisket is done
          {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
            Chicken is done
          {% elif is_state("input_select.bbq_probe1", "Fish") -%}
            Fish is done
          {% elif is_state("input_select.bbq_probe1", "Steak") -%}
            Steak is done
          {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
            Turkey is done
          {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
            Tritip is done
          {%- else -%}
          {%- endif %}
  - service: shell_command.bbq_done
    #entity_id: media_player.home_notification
    #entity_id: media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
    # data_template:
      # message: >
       # {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
         # Beef Ribs are done
       # {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
         # Briket is done
       # {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
         # Chicken is done
       # {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
         # Tritip is done
       # {%- else -%}
       # {%- endif %}
      # entity_id: >
        # {% if states.media_player.home_notification.state != 'unavailable' %}
          # media_player.home_notification
        # {% else %}
          # media_player.den_home, media_player.kitchen_home, media_player.bedroom_speaker, media_player.office_speaker, media_player.bathroom_speaker, media_player.living_room_home
        # {%endif %}
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 30
        position: center
      message: >
       {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
         Beef Ribs are done
       {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
         Brisket is done
       {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
         Chicken is done
       {% elif is_state("input_select.bbq_probe1", "Fish") -%}
         Fish is done
       {% elif is_state("input_select.bbq_probe1", "Steak") -%}
         Steak is done
       {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
         Turkey is done
       {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
         Tritip is done
       {%- else -%}
       {%- endif %}
      title: Shokabow Zoo
  - service: input_select.select_option
    entity_id: input_select.bbq_probe1
    data:
      option: "Select Input"
      
- alias: BBQ notifications not on
  trigger:
  - platform: state
    entity_id: input_select.bbq_probe1
    from: "Select Input"
  condition:
    condition: state
    entity_id: binary_sensor.bbq1
    state: 'off'
  action:
  - delay: "00:00:20"
  - service: input_select.select_option
    entity_id: input_select.bbq_probe1
    data:
      option: "Select Input"

- alias: Set BBQ override
  trigger:
    platform: state
    entity_id: input_select.bbq_probe1
  condition:
    condition: state
    entity_id: binary_sensor.bbq1
    state: 'on'
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.bbq1_override
      value: >
       {% if is_state("input_select.bbq_probe1", "Beef Ribs") -%}
         205
       {% elif is_state("input_select.bbq_probe1", "Brisket") -%}
         205
       {% elif is_state("input_select.bbq_probe1", "Chicken") -%}
         165
       {% elif is_state("input_select.bbq_probe1", "Fish") -%}
         145
       {% elif is_state("input_select.bbq_probe1", "Turkey") -%}
         160
       {% elif is_state("input_select.bbq_probe1", "Tritip") -%}
         130
       {% elif is_state("input_select.bbq_probe1", "Select Input") -%}
         130
       {%- else -%}
         130
       {%- endif %}

################################################
#
#      Pool Pump Automations
#
################################################

- alias: Notify pool pump offline
  trigger:
    platform: numeric_state
    entity_id: sensor.pool_pump_power
    below: 3
    for:
      minutes: 10
  condition:
    condition: state
    entity_id: sensor.season
    state: summer
  action:
  # - service: notify.chrome
    # data:
      # message: "Pool pump is offline, go outside and hit reset"
      # target: danny_pixel
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: "Pool pump is offline, go outside and hit reset"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data:
      target:
      - id: !secret hangouts_danny
      message:
      - text: "Pool pump is offline, go outside and hit reset"

################################################
#
#      Vacation Lights Automations
#
################################################

- alias: Vacation lighting
  trigger:
  - platform: sun
    event: sunset
    offset: "00:30:00"
  - platform: state
    entity_id: alarm_control_panel.home
    to: 'armed_away'
    for:
      minutes: 20
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.vacation_mode
      state: 'on'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'armed_away'
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
  action:
  - delay: '00:{{ range(10,59) | random | int }}:{{ range(20,59) | random | int }}'
  - service: light.turn_on
    entity_id: light.kitchen_lights_level
  - delay: '0{{ range(0,3) | random | int }}:{{ range(20,59) | random | int }}:00'
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  - service: light.turn_off
    entity_id: light.kitchen_lights_level
  - delay: '00:{{ range(10,59) | random | int }}:{{ range(20,59) | random | int }}'
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  - service: light.turn_on
    entity_id: light.bedroom_lights_level
  - delay: '0{{ range(0,1) | random | int }}:{{ range(20,59) | random | int }}:00'
  - condition: state
    entity_id: alarm_control_panel.home
    state: 'armed_away'
  - service: light.turn_off
    entity_id: light.bedroom_lights_level
    
################################################
#
#      Fan Automations
#
################################################

- alias: Turn on den fan when its too hot
  trigger:
  - platform: numeric_state
    entity_id: sensor.den_air_purifier_temp
    above: 76
  condition:
    condition: state
    entity_id: switch.den_fan
    state: 'off'
  action:
    service: switch.turn_on
    entity_id: switch.den_fan
    
- alias: Turn off den fan when it cools down
  trigger:
  - platform: numeric_state
    entity_id: sensor.den_air_purifier_temp
    below: 74
  condition:
    condition: state
    entity_id: switch.den_fan
    state: 'on'
  action:
    service: switch.turn_off
    entity_id: switch.den_fan
 
- alias: Living room fan
  trigger:
  - platform: numeric_state
    entity_id: sensor.living_room_air_purifier_temp
    above: 76
  - platform: numeric_state
    entity_id: sensor.living_room_air_purifier_temp
    below: 74
  action:
    service_template: >
        {% if states('sensor.living_room_air_purifier_temp')|int > 76 %}
          switch.turn_on
        {% elif states('sensor.living_room_air_purifier_temp')|int < 74 %}
          switch.turn_off
        {% endif %}
    entity_id: switch.living_room_fan

################################################
#
#      Air Purifier Automations
#
################################################

- alias: Clean Air Purifier Filter
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '18:00:00'
  condition:
    condition: template
    value_template: "{{ (state_attr('fan.den_air_purifier', 'filter_life_remaining')| int <= 3) or (state_attr('fan.living_room_air_purifier', 'filter_life_remaining')| int <= 3) or (state_attr('fan.bedroom_air_purifier', 'filter_life_remaining')| int <= 3) or (state_attr('fan.office_air_purifier', 'filter_life_remaining')| int <= 3) }}"
  action:
  # - service: notify.chrome
    # data_template:
      # message: >-
         # {% if state_attr('fan.den_air_purifier', 'filter_life_remaining')| int == 0 %}
           # Clean den air purifier filter
         # {% elif state_attr('fan.living_room_air_purifier', 'filter_life_remaining')| int == 0 %}
           # Clean living room air purifier filter
         # {% elif state_attr('fan.bedroom_air_purifier', 'filter_life_remaining')| int == 0 %}
           # Clean bedroom air purifier filter
         # {% elif state_attr('fan.office_air_purifier', 'filter_life_remaining')| int == 0 %}
           # Clean office air purifier filter
         # {% else %}
         # {% endif %}
      # target: ["danny_pixel", "tosh_phone"]
      # title: Shokabow Zoo
  - service: notify.discord
    data_template:
      message: >-
         {% if state_attr('fan.den_air_purifier', 'filter_life_remaining')| int <= 3 %}
           Clean den air purifier filter
         {% elif state_attr('fan.living_room_air_purifier', 'filter_life_remaining')| int <= 3 %}
           Clean living room air purifier filter
         {% elif state_attr('fan.bedroom_air_purifier', 'filter_life_remaining')| int <= 3 %}
           Clean bedroom air purifier filter
         {% elif state_attr('fan.office_air_purifier', 'filter_life_remaining')| int <= 3 %}
           Clean office air purifier filter
         {% else %}
         {% endif %}
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: >-
         {% if state_attr('fan.den_air_purifier', 'filter_life_remaining')| int <= 3 %}
           Clean den air purifier filter
         {% elif state_attr('fan.living_room_air_purifier', 'filter_life_remaining')| int <= 3 %}
           Clean living room air purifier filter
         {% elif state_attr('fan.bedroom_air_purifier', 'filter_life_remaining')| int <= 3 %}
           Clean bedroom air purifier filter
         {% elif state_attr('fan.office_air_purifier', 'filter_life_remaining')| int <= 3 %}
           Clean office air purifier filter
         {% else %}
         {% endif %}

################################################
#
#      Google Home Timer Automations
#
################################################

- alias: Google Home Timer Notification
  trigger:
    platform: state
    entity_id:
    - sensor.bathroom_speaker_timer
    - sensor.bedroom_home_timer
    - sensor.den_home_hub_timer
    - sensor.kitchen_home_timer
    - sensor.living_room_home_timer
    - sensor.office_speaker_timer
  condition:
    condition: template
    value_template: "{{ trigger.from_state.state != 'unavailable' }}"
  action:
  #- wait_template: "{{ (as_timestamp(trigger.to_state.state) | int) == (as_timestamp(now()) | int) }}"
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: "{{ trigger.to_state.attributes.friendly_name }} completed!"
      title: Shokabow Zoo
  - service: shell_command.timer_completed
    data_template:
      friendly_name: "{{ trigger.to_state.attributes.friendly_name | replace(' ', '+') }}"
  - service: notify.discord
    data_template:
      message: "{{ trigger.to_state.attributes.friendly_name }} completed!"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "{{ trigger.to_state.attributes.friendly_name }} completed!"

################################################
#
#      Next Rocket Launch Automations
#
################################################

- alias: Rocket Launch
  trigger:
    platform: time_pattern
    minutes: '/60'
    seconds: 00
  condition:
    condition: template
    value_template: >-
          {% if ((as_timestamp(now()) > (as_timestamp(states.sensor.next_launch.attributes.launch_time) | int - 3600 ) ) ) and ((as_timestamp(states.sensor.next_launch.attributes.launch_time) > (as_timestamp(now()) )))%}
            true
          {% else %}
            false
          {% endif %}
  action:
  - service: notify.discord
    data_template:
      message: "Rocket launch within the hour! {{ states.sensor.next_launch.state }} by {{ states.sensor.next_launch.attributes.agency }} at {{ ( as_timestamp( strptime(states.sensor.next_launch.attributes.launch_time, '%B %d, %Y %H:%M:%S %Z') ) ) | timestamp_custom('%h %d, %Y %I:%M %p')}}.  Streaming link: {{ states.sensor.next_launch.attributes.stream }}"
      target:
      - !secret discord_house
  - service: hangouts.send_message
    data_template:
      target:
      - id: !secret hangouts_group
      message:
      - text: "Rocket launch within the hour! {{ states.sensor.next_launch.state }} by {{ states.sensor.next_launch.attributes.agency }} at {{ ( as_timestamp( strptime(states.sensor.next_launch.attributes.launch_time, '%B %d, %Y %H:%M:%S %Z') ) ) | timestamp_custom('%h %d, %Y %I:%M %p')}}.  Streaming link: {{ states.sensor.next_launch.attributes.stream }}"

################################################
#
#      Image Processing Automations
#
################################################

- alias: Image processing on motion detection frontyard
  trigger:
    platform: state
    entity_id: binary_sensor.frontyard_driveway_motion, binary_sensor.frontyard_side_gate_motion
  condition:
    condition: state
    entity_id: input_boolean.gardener
    state: 'off'
  action:
  - service: image_processing.scan
    data_template:
      entity_id: "image_processing.tensorflow_{{ trigger.entity_id.split('.')[1].replace('_motion', '') }}"

- alias: Notify image processing
  trigger:
    platform: state
    entity_id: image_processing.tensorflow_frontyard_driveway, image_processing.tensorflow_frontyard_side_gate, image_processing.tensorflow_den_camera, image_processing.tensorflow_living_room_camera, image_processing.tensorflow_baby_monitor, image_processing.tensorflow_outdoor_camera, image_processing.tensorflow_patio, image_processing.tensorflow_garage_side_gate, image_processing.tensorflow_kitchen_side_gate
  condition:
    condition: template
    value_template: '{{ trigger.to_state.state |int > 0 }}'
  action:
  # - service: hangouts.send_message
    # data_template:
      # target:
      # - id: !secret hangouts_danny
      # message:
      # - text: >
            # {% for object in state_attr(trigger.entity_id,'matches').keys() -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object|title }}{%- endfor %} detected in {{ trigger.entity_id.split('.')[1].replace('_', ' ').replace('tensorflow ', '') }}.
      # data:
        # image_file: "/home/homeassistant/.homeassistant/snapshot/{{ trigger.entity_id.split('.')[1].replace('tensorflow_', '') }}_latest.jpg"
  - service: notify.discord
    data_template:
      message: >
            {% for object in state_attr(trigger.entity_id,'matches').keys() -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object|title }}{%- endfor %} detected in {{ trigger.entity_id.split('.')[1].replace('_', ' ').replace('tensorflow ', '') }}.
      target:
      - !secret discord_images
      data:
        images:
        - "/home/homeassistant/.homeassistant/snapshot/{{ trigger.entity_id.split('.')[1].replace('tensorflow_', '') }}_latest.jpg"
  - condition: template
    value_template: "{{ (trigger.entity_id == 'image_processing.tensorflow_frontyard_driveway') or (trigger.entity_id == 'image_processing.tensorflow_frontyard_side_gate') }}"
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
        file:
          path: "/home/homeassistant/.homeassistant/snapshot/{{ trigger.entity_id.split('.')[1].replace('tensorflow_', '') }}_latest.jpg"
      message: >
            {% for object in state_attr(trigger.entity_id,'matches').keys() -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object|title }}{%- endfor %} detected in {{ trigger.entity_id.split('.')[1].replace('_', ' ').replace('tensorflow ', '') }}.
      title: Shokabow Zoo

- alias: Image Processing When Away
  trigger:
    platform: state
    entity_id: binary_sensor.patio_motion, binary_sensor.kitchen_side_gate_motion, binary_sensor.garage_side_gate_motion
  condition:
  - condition: state
    entity_id: alarm_control_panel.home
    state: armed_away
  action:
  - service: image_processing.scan
    data_template:
      entity_id: "image_processing.tensorflow_{{ trigger.entity_id.split('.')[1].replace('_motion', '') }}"

- alias: Image processing in kitchen on motion when someone is home and awake
  trigger:
    platform: state
    entity_id: binary_sensor.baby_monitor_motion_detected
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: light.kitchen_lights_level
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: switch.island_lights_switch
      state: 'off'
    - condition: state
      entity_id: input_boolean.movie_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.sleeping
      state: 'off'
  action:
  - service: image_processing.scan
    data:
      entity_id: image_processing.tensorflow_baby_monitor

- alias: Image processing in living room on motion when someone is home and awake
  trigger:
    platform: state
    entity_id: binary_sensor.living_room_camera_motion_detected
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: group.tracked_users
      state: 'home'
    - condition: state
      entity_id: light.living_room_lights_level
      state: 'off'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
    - condition: state
      entity_id: input_boolean.movie_mode
      state: 'off'
    - condition: state
      entity_id: input_boolean.sleeping
      state: 'off'
  action:
  - service: image_processing.scan
    data:
      entity_id: image_processing.tensorflow_living_room_camera

- alias: Turn on lights when person detected
  trigger:
    platform: state
    entity_id: image_processing.tensorflow_baby_monitor, image_processing.tensorflow_living_room_camera
  condition:
    condition: template
    value_template: '{{ trigger.to_state.state |int > 0 }}'
  action:
  - service: light.turn_on
    data_template:
      entity_id: >
             {% if trigger.entity_id == 'image_processing.tensorflow_baby_monitor' %}
               light.kitchen_lights_level
             {% elif trigger.entity_id == 'image_processing.tensorflow_living_room_camera' %}
               light.living_room_lights_level
             {% else %}
             {% endif %}

################################################
#
#      Webhook Automations
#
################################################

- alias: Vacuum Hallway
  trigger:
    platform: webhook
    webhook_id: !secret neato_hallway
  action:
  - service: vacuum.neato_custom_cleaning
    data:
      entity_id: vacuum.mrs_neato
      zone: Hallway

- alias: Vacuum Kitchen
  trigger:
    platform: webhook
    webhook_id: !secret neato_kitchen
  action:
  - service: vacuum.neato_custom_cleaning
    data:
      entity_id: vacuum.mrs_neato
      zone: Kitchen

- alias: Vacuum Living Room
  trigger:
    platform: webhook
    webhook_id: !secret neato_living_room
  action:
  - service: vacuum.neato_custom_cleaning
    data:
      entity_id: vacuum.mrs_neato
      zone: Living room

- alias: Good night via google home
  trigger:
    platform: webhook
    webhook_id: !secret goodnight
  action:
  - service: scene.turn_on
    entity_id: scene.goodnight
  - delay: "00:00:05"
  - service: light.turn_on
    entity_id: light.toshs

- alias: Danny tasker awake webhook
  trigger:
    platform: webhook
    webhook_id: !secret danny_awake_webhook
  action:
  - service: switch.turn_off
    entity_id: switch.tasker_sleep_danny

- alias: Tosh tasker awake webhook
  trigger:
    platform: webhook
    webhook_id: !secret tosh_awake_webhook
  action:
  - service: switch.turn_off
    entity_id: switch.tasker_sleep_tosh

################################################
#
#      ADB Automations
#
################################################

- alias: ADB reconnect
  trigger:
    platform: state
    entity_id: media_player.den_shield_tv, media_player.bedroom_shield_tv, media_player.kitchen_fire_stick, media_player.nursery_fire_stick
    to: 'unavailable'
    for:
      minutes: 1
  action:
    - service: shell_command.adb_connect
      data_template:
        ip_adb: >-
            {% if trigger.entity_id == 'media_player.den_shield_tv' %}
              192.168.1.72
            {% elif trigger.entity_id == 'media_player.bedroom_shield_tv' %}
              192.168.1.92
            {% elif trigger.entity_id == 'media_player.kitchen_fire_stick' %}
              192.168.1.52
            {% elif trigger.entity_id == 'media_player.nursery_fire_stick' %}
              192.168.1.18
            {% else %}
            {% endif %}

################################################
#
#      Cat Litter Automations
#
################################################

- alias: Increase Cat Motion Counter
  trigger:
    platform: state
    entity_id: binary_sensor.cat_litter_motion
    to: 'on'
  action:
    service: counter.increment
    entity_id: counter.cat_litter_motion

- alias: Reset Cat Motion Counter
  trigger:
    platform: state
    entity_id: input_boolean.cat_litter_cleaned
    to: 'on'
  action:
  - service: counter.reset
    entity_id: counter.cat_litter_motion

- alias: Cat Litter Cleaned When Opened
  trigger:
    platform: numeric_state
    entity_id: sensor.cat_litter_luminance
    above: 50
  action:
  - service_template: >-
            {% if is_state('input_boolean.cat_litter_cleaned', 'off') %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
    entity_id: input_boolean.cat_litter_cleaned
  - condition: state
    entity_id: input_boolean.cat_litter_cleaned
    state: 'off'
  - service: input_boolean.turn_on
    entity_id: input_boolean.cat_litter_cleaned

- alias: Clean the cat litter
  trigger:
  - platform: numeric_state
    entity_id: counter.cat_litter_motion
    above: 49
  condition:
    condition: state
    entity_id: input_boolean.cat_litter_cleaned
    state: 'on'
  action:
  - wait_template: "{{ is_state('alarm_control_panel.home', 'disarmed') }}"
  - service: input_boolean.turn_off
    entity_id: input_boolean.cat_litter_cleaned
  - service: notify.discord
    data_template:
      message: "There have been {{ states('counter.cat_litter_motion') }} trips to the cat box, time to clean."
      target:
      - !secret discord_house

################################################
#
#      Cube Automations
#
################################################

- alias: Mute den on double tap
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: tap_twice
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: remote.harmony_hub_den
      state: 'on'
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
  action:
    service: remote.send_command
    data:
      entity_id: remote.harmony_hub_den
      device: 55196241
      command: 'Mute'

- alias: Toggle patio lights on flip 90
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: flip90
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: below_horizon
    - condition: state
      entity_id: alarm_control_panel.home
      state: 'disarmed'
  action:
    service: light.toggle
    entity_id: light.patio

- alias: Notify rotate cube degrees
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: rotate
  action:
  - service: notify.discord
    data_template:
      message: "Cube rotated {{ trigger.event.data.action_value }} degrees."
      target:
      - !secret discord_danny

- alias: Pause or Play on flip 180
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: flip180
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: media_player.den_shield_tv
      state: 'playing'
    - condition: state
      entity_id: media_player.den_shield_tv
      state: 'paused'
  action:
  - service: media_player.media_play_pause
    entity_id: media_player.den_shield_tv
  - condition: state
    entity_id: sensor.den_shield_app
    state: 'Vaders'
  - condition: state
    entity_id: media_player.den_shield_tv
    state: 'playing'
  - service: media_player.media_play_pause
    entity_id: media_player.den_shield_tv

- alias: Toggle den fan on shake
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: shake_air
  condition:
    condition: state
    entity_id: alarm_control_panel.home
    state: 'disarmed'
  action:
    service: switch.toggle
    entity_id: switch.den_fan

################################################
#
#      Sous Vide Automations
#
################################################

- alias: Notify when Sous Vide is ready
  trigger:
    platform: state
    entity_id: climate.sous_vide
    to: 'running'
    for:
      minutes: 1
  action:
  - wait_template: "{{ state_attr('climate.sous_vide', 'current_temperature') == state_attr('climate.sous_vide', 'temperature') }}"
  - service: notify.discord
    data_template:
      message: "Sous vide is ready at {{ state_attr('climate.sous_vide', 'current_temperature') }}"
      target:
      - !secret discord_house
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: "Sous vide is ready at {{ state_attr('climate.sous_vide', 'current_temperature') }}"
      title: Shokabow Zoo
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: shell_command.sous_vide_temp_ready

################################################
#
#      Bottle Warmer Automations
#
################################################

- alias: Notify bottle warmer completed
  trigger:
    platform: numeric_state
    entity_id: sensor.bottle_warmer
    below: 5
  action:
  - service: notify.discord
    data_template:
      message: "Bottle warmer is done"
      target:
      - !secret discord_house
  - service: notify.den
    data_template:
      data:
        color: red
        duration: 10
        position: center
      message: "Bottle warmer is done"
      title: Shokabow Zoo
  - condition: state
    entity_id: input_boolean.night_mode
    state: 'off'
  - service: shell_command.bottle_warmer_completed